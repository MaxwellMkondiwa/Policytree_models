---
title: "Multi-armed bandit policy targeting of agronomic practices"
format: 
    html:
      code-fold: true
      code-tools: true
fig-dpi: 300
fig-width: 3.88
fig-align: center
fig-height: 3.16

self-contained: true
author: Maxwell Mkondiwa
editor: visual
toc: true
toc-location: left
number-sections: true
execute: 
  message: false
  warning: false
  echo: true
---

# Introduction

In this notebook, I use a causal machine learning estimator, i.e., multi-armed causal random forest with augmented inverse propensity score weights (Athey et al 2019), to estimate conditional average treatment effects (CATES) for agronomic practices. These CATEs are estimated for each individual farm thereby providing personalized estimates of the potential effectiveness of the practices. I then use a debiased robust estimator in a policy tree optimization (Athey and Wager 2021) to generate optimal recommendations in the form of agronomic practices that maximize potential yield gains.

```{r}
#rm(list=ls())
set.seed(2)
# Packages --------------------
library(sp)
#library(rgdal)
library(dplyr)
library(rio)
library(readxl)
library(sf)
library(ggplot2)
library(grf)
library(forcats)
#library(bbplot)
suppressMessages(library(mapview))

load("LDS_Public_Workspace2.RData")

LDS$Sowing_Date_Schedule_rating_num[LDS$Sowing_Date_Schedule=="T5_16Dec"]=1
LDS$Sowing_Date_Schedule_rating_num[LDS$Sowing_Date_Schedule=="T4_15Dec"]=2
LDS$Sowing_Date_Schedule_rating_num[LDS$Sowing_Date_Schedule=="T3_30Nov"]=3
LDS$Sowing_Date_Schedule_rating_num[LDS$Sowing_Date_Schedule=="T2_20Nov"]=4
LDS$Sowing_Date_Schedule_rating_num[LDS$Sowing_Date_Schedule=="T1_10Nov"]=5

LDS$Sowing_Date_Schedule=ordered(LDS$Sowing_Date_Schedule,levels=c("T5_16Dec","T4_15Dec","T3_30Nov","T2_20Nov","T1_10Nov"))

# Select variables needed for the analysis -----------------------------
LDSestim=subset(LDS, select=c("hhid","Jan_tmin_18","Feb_tmin_18","Mar_tmin_18", "Apr_tmin_18","Jan_tmax_18","Feb_tmax_18","Mar_tmax_18", "Apr_tmax_18","C.q307_largestPlotType","A.q114_socialCategory","M.q702_hhMemAg","J.q5601_1herbName","D.q410_varName","Sowing_Date_Schedule_rating_num","G.q5305_irrigTimes_cat"

,"Sowing_Date_Schedule","Rabi2017_18","Sowing_Date_Early","Weedmanual","gpw_v4_population_density_rev11_2020_30_sec","M.q703_marketSaleShare","I.q5512_lodgingPercent","I.q5505_weedSeverity_num","I.q5509_diseaseSeverity_num","I.q5506_insectSeverity_num",
                              "I.q5504_floodSeverity_num","I.q5502_droughtSeverity_num","I.q5502_droughtSeverity","A.q114_socialCategory","A.q112_fEdu","A.q112_fEdu_new","G.q5301_irrigAvail_dum","G.q5305_irrigTimes_onevsall","G.q5305_irrigTimes_twovs1","G.q5305_irrigTimes_threevs1","G.q5305_irrigTimes_fourplusvs1","PumpEnergySource","IrrigSource","G.q5305_irrigTimes","D.q403_soilPerception"
,
                              "D.q401_soilTexture","D.q402_drainClass","PrevCropHarvestDayfor1stJan2017_num","D.prevCrop_Fallow","D.prevCrop_Rice","I.q5505_weedSeverity_num","L.q607_farmGatePricePerKg","L.tonPerHectare","C.q306_cropLarestAreaHA",
                              "G.q5305_irrigTimes","variety_type_NMWV","Nperha","NperhaSq","Nperha_100belowvsabove","Nperha_100belowvs100_150","Nperha_100belowvs150_200","Nperha_100belowvs200_250","Nperha_100belowvs200plus",
                              "P2O5perha","A.q111_fGenderdum","Weedmanaged","Weedherb","temp","precip","wc2.1_30s_elev",
                              "M.q708_marketDistance","nitrogen_0.5cm","sand_0.5cm", "soc_5.15cm","O.largestPlotGPS.Longitude","O.largestPlotGPS.Latitude","A.q103_district","temp.2008","precip.2008","temp.2009",                               
                              "precip.2009", "temp.2010","precip.2010","temp.2011","precip.2011","temp.2012","precip.2012","temp.2013","precip.2013","temp.2014","precip.2014","temp.2015","precip.2015","temp.2016",                                  
                              "precip.2016","temp.2017","precip.2017"))


# Socio-economic variables 
LDSestim$A.q112_fEdu_new_num[LDSestim$A.q112_fEdu_new=="noSchooling"]=0
LDSestim$A.q112_fEdu_new_num[LDSestim$A.q112_fEdu_new=="primary"]=1
LDSestim$A.q112_fEdu_new_num[LDSestim$A.q112_fEdu_new=="matriculation"]=2
LDSestim$A.q112_fEdu_new_num[LDSestim$A.q112_fEdu_new=="seniorSecondary"]=3
LDSestim$A.q112_fEdu_new_num[LDSestim$A.q112_fEdu_new=="bachelors"]=4
LDSestim$A.q112_fEdu_new_num[LDSestim$A.q112_fEdu_new=="Postgrad"]=5

LDSestim$Caste_marginalized[LDSestim$A.q114_socialCategory=="General"]=0
LDSestim$Caste_marginalized[LDSestim$A.q114_socialCategory%in%c("OBC","Other","SC","ST")]=1

LDSestim$Plot_owned[LDSestim$C.q307_largestPlotType=="Owned"]=1
LDSestim$Plot_owned[LDSestim$C.q307_largestPlotType%in%c("FarmedContract","Leased")]=0





## Herbicides cleaning -----------------------

LDSestim$J.q5601_1herbName_2=gsub("([^A-Za-z0-9 ])+","", LDSestim$J.q5601_1herbName)

LDSestim$J.q5601_1herbName_2=as.character(LDSestim$J.q5601_1herbName_2)
LDSestim$J.q5601_1herbName_2[LDSestim$J.q5601_1herbName_2==""]="NA"

table(LDSestim$J.q5601_1herbName_2)

LDSestim$Herbicidename="NA"
LDSestim$Herbicidename[LDSestim$J.q5601_1herbName_2%in%c("2  4 D","2 4 d","2-4 D","2 4 D","2 4d","2 4D","24 D","24d","2D","34D","hera","Hera","24D")]="2,4-D"

LDSestim$Herbicidename[LDSestim$J.q5601_1herbName_2%in%c("SulfosulfuronMetsulfuron","SulfosulfuronMetsulfuron")]="SulfosulfuronMetsulfuron"

LDSestim$Herbicidename[LDSestim$J.q5601_1herbName_2%in%c("CarfentrazoneSulfosulfuron","Carfentrazone")]="Carfentrazone"



# Metsulfuron -----------
LDSestim$Herbicidename[LDSestim$J.q5601_1herbName_2%in%c("Metsu","MetsulfuronClodinafop","Metsulfuronsulfosulfuron","Metsulfuron")]="Metsulfuron"

#Sulfusulfuran ---------------------------

LDSestim$Herbicidename[LDSestim$J.q5601_1herbName_2%in%c("Leader","Sufosulfuran","Sulfosufuran","Sulfosulfuran","Sulfosulfuron")]="Sulfosulfuron"

LDSestim$Herbicidename[LDSestim$J.q5601_1herbName_2%in%c("Pendimethalin","Pendimethillin","Pendia","Penida","Stomp","Pendimethalin")]="Pendimethalin"

LDSestim$Herbicidename[LDSestim$J.q5601_1herbName_2%in%c("TOTAL","Totak","total","Tal","Total")]="Total"

LDSestim$Herbicidename[LDSestim$J.q5601_1herbName_2%in%c("unknown","Unknown")]="Unknown"

LDSestim$Herbicidename[LDSestim$Weedmanual==1 & LDSestim$Weedherb==1]="Manual_herb"
LDSestim$Herbicidename[LDSestim$Weedmanual==1 & LDSestim$Weedherb==0]="Manual"

LDSestim$Herbicidename[is.na(LDSestim$J.q5601_1herbName_2) & LDSestim$Weedherb==1]="Unknown"
LDSestim$Herbicidename[LDSestim$Weedmanaged==0]="None"
LDSestim$Herbicidename[is.na(LDSestim$J.q5601_1herbName_2) & LDSestim$Weedherb==0 & LDSestim$Weedmanual==0]="None"

table(LDSestim$Herbicidename,LDSestim$Weedherb) # There are some observations where herbicide times is 0 but they recorded the herbicide name. We treated these as no herbicide application

table(LDSestim$J.q5601_1herbName_2,LDSestim$Weedherb)


LDSestim$Herbicidename_cat=NA

LDSestim$Herbicidename_cat[LDSestim$Herbicidename=="None"]="No weeding"
LDSestim$Herbicidename_cat[LDSestim$Herbicidename=="2,4-D"]="2,4-D"
LDSestim$Herbicidename_cat[LDSestim$Herbicidename=="Manual"]="Manual"
LDSestim$Herbicidename_cat[LDSestim$Herbicidename=="Manual_herb"]="Manual_herb"

LDSestim$Herbicidename_cat[LDSestim$Herbicidename%in%c("SulfosulfuronMetsulfuron","Total")]="SulfosulfuronMetsulfuron"

LDSestim$Herbicidename_cat=ordered(LDSestim$Herbicidename_cat,levels=c("No weeding","Manual","Manual_herb","2,4-D","SulfosulfuronMetsulfuron"))

```

## Graphics

```{r}
table(LDSestim$Sowing_Date_Schedule)

LDSestim$D.q410_varName[LDSestim$D.q410_varName=="ShriRam 303"]="SUPER303"

LDSestim_variety = subset(LDSestim, LDSestim$D.q410_varName %in% c("PBW343", "UP262", "LOK1", "HD2967", "PBW154", "Kedar", "SUPER303", "PBW502", "HD2733", "HUW234", "RR21", "Local"))

LDSestim_variety$D.q410_varName=ordered(LDSestim_variety$D.q410_varName,levels=c("HD2967","Local","PBW343","UP262","LOK1","PBW154","Kedar","SUPER303","PBW502","HD2733","HUW234","RR21"))


# Bar graphs showing percentage of farmers adopting these practices

library(tidyverse)
library(ggplot2)

bar_chart=function(dat,var){
  dat|>
    drop_na({{var}})|>
    mutate({{var}}:=factor({{var}})|>fct_infreq())|>
    ggplot()+
    geom_bar(aes(y={{var}}),width = 0.3,fill="dodgerblue4")+
    theme_minimal(base_size = 16)
}


herb_plot=bar_chart(LDSestim,Herbicidename_cat)+labs(y="Weed management options")
herb_plot

ggsave("figures/herb_plot.png", dpi=300,width = 3.88, height = 3.16)


sow_plot=bar_chart(LDSestim,Sowing_Date_Schedule)+labs(y="Sowing dates")
sow_plot

ggsave("figures/sow_plot.png", dpi=300,width = 3.88, height = 3.16)


irrig_plot=bar_chart(LDSestim,G.q5305_irrigTimes_cat)+labs(y="Number of irrigations")
irrig_plot
ggsave("figures/irrig_plot.png", dpi=300,width = 3.88, height = 3.16)

variety_plot=bar_chart(LDSestim_variety,D.q410_varName)+labs(y="Variety")
variety_plot

ggsave("figures/variety_plot.png", dpi=300,width = 3.88, height = 3.16)

library(ggpubr)
adoption_all=ggarrange(herb_plot,sow_plot,irrig_plot,variety_plot, ncol = 2,nrow=2)
adoption_all
ggsave("figures/adoption_all.png")

# Alternative graphs
Herbicidename_cat_n_perc=LDSestim%>%
   dplyr::count(Herbicidename_cat, sort = TRUE) %>% 
   dplyr::mutate(Herbicidename_cat_n=     forcats::fct_rev(forcats::fct_inorder(Herbicidename_cat)),
  Herbicidename_cat_n = forcats::fct_relevel(Herbicidename_cat, after = 0)) %>%
    dplyr::mutate(herbpercent=paste0(sprintf("%4.1f",n/sum(n)*100),"%"))

library(forcats)

ggplot(Herbicidename_cat_n_perc, aes(x = n, y = Herbicidename_cat)) +
  geom_col(fill = "dodgerblue4") +
  ## add percentage labels
  geom_text(aes(label = herbpercent),hjust = 1, nudge_x = -.5,color="white") +
  theme_minimal(base_size = 16)


# Error bar plots showing yield gains of each of the choices 

## Weed management options 
library(ggpubr)
library(tidyverse)
WeedMgt_Options_Errorplot=
  LDSestim%>% 
  drop_na(Herbicidename_cat) %>%
  ggerrorplot(x = "Herbicidename_cat", y = "L.tonPerHectare",add = "mean", error.plot = "errorbar", color="black",size=1,ggtheme=theme_bw())+
  labs(x="Weed management options",y="Wheat yield (t/ha)")+
  theme_bw(base_size = 16)+coord_flip()

WeedMgt_Options_Errorplot+
  aes(x = fct_reorder(Herbicidename_cat, L.tonPerHectare))+
 xlab("Weed management options")
#theme(axis.text = element_text(size = 20,colour = "black"))+theme(axis.title = element_text(size = 20))
ggsave("figures/WeedMgt_Options_Errorplot.png",dpi=300,width = 3.88, height = 3.16 )

write.csv(LDSestim,"LDSestim.csv")

#Sowing dates
SowingDate_Options_Errorplot=
  LDSestim%>% 
  drop_na(Sowing_Date_Schedule) %>%
  ggerrorplot(x = "Sowing_Date_Schedule", y = "L.tonPerHectare",add = "mean", error.plot = "errorbar", color="black",size=1, ggtheme=theme_bw())+
  labs(x="Sowing date options",y="Wheat yield (t/ha)")+
  theme_bw(base_size = 16)+coord_flip()

SowingDate_Options_Errorplot+aes(x = fct_reorder(Sowing_Date_Schedule, L.tonPerHectare))+
 xlab("Sowing date options")
ggsave("figures/SowingDate_Options_Errorplot.png",dpi=300,width = 3.88, height = 3.16)

# Irrigation schedules
Irrigation_Options_Errorplot=
  LDSestim%>% 
  drop_na(G.q5305_irrigTimes_cat) %>%
  ggerrorplot(x = "G.q5305_irrigTimes_cat", y = "L.tonPerHectare",add = "mean", error.plot = "errorbar",color="black",size=1, ggtheme=theme_bw())+
  labs(x="Irrigation scheduling options",y="Wheat yield (t/ha)")+
  theme_bw(base_size = 16)+coord_flip()

Irrigation_Options_Errorplot+ aes(x = fct_reorder(G.q5305_irrigTimes_cat, L.tonPerHectare))+
 xlab("Irrigation scheduling options")
ggsave("figures/Irrigation_Options_Errorplot.png",dpi=300,width = 3.88, height = 3.16)


# Varieties 

Variety_Options_Errorplot=
  LDSestim_variety%>% 
  drop_na(D.q410_varName) %>%
  ggerrorplot(x = "D.q410_varName", y = "L.tonPerHectare",add = "mean", error.plot = "errorbar", color="black",size=1, ggtheme=theme_bw())+
  labs(x="Varietal options",y="Wheat yield (t/ha)")+
  theme_bw(base_size = 16)+coord_flip()

Variety_Options_Errorplot+ aes(x = fct_reorder(D.q410_varName, L.tonPerHectare))+
 xlab("Varietal options")

ggsave("figures/Variety_Options_Errorplot.png",dpi=300,width = 4.88, height = 4.16)


library(ggpubr)
mean_comparison_all=ggarrange(WeedMgt_Options_Errorplot,SowingDate_Options_Errorplot,Irrigation_Options_Errorplot,Variety_Options_Errorplot, ncol = 2,nrow=2)

mean_comparison_all
ggsave("figures/mean_comparison_all.png")



```

## Descriptives

```{r}

library(fastDummies)
LDSestim_Desc=fastDummies::dummy_cols(LDSestim, select_columns=c("G.q5305_irrigTimes_cat","Sowing_Date_Schedule","Herbicidename_cat","A.q112_fEdu_new"))


library(fBasics)
summ_stats <- fBasics::basicStats(LDSestim_Desc[,c("L.tonPerHectare","G.q5305_irrigTimes",
  "G.q5305_irrigTimes_cat_One","G.q5305_irrigTimes_cat_Two",                 "G.q5305_irrigTimes_cat_Three","G.q5305_irrigTimes_cat_Fourplus","Sowing_Date_Schedule_T5_16Dec",               "Sowing_Date_Schedule_T4_15Dec","Sowing_Date_Schedule_T3_30Nov",             "Sowing_Date_Schedule_T2_20Nov","Sowing_Date_Schedule_T1_10Nov",             "A.q112_fEdu_new_noSchooling","A.q112_fEdu_new_primary","A.q112_fEdu_new_matriculation", "A.q112_fEdu_new_seniorSecondary",          "A.q112_fEdu_new_bachelors","A.q112_fEdu_new_Postgrad",                                      "Nperha","P2O5perha","Weedmanaged","variety_type_NMWV","Sowing_Date_Early","I.q5505_weedSeverity_num","I.q5509_diseaseSeverity_num","I.q5506_insectSeverity_num","I.q5502_droughtSeverity_num",                                       "temp","precip","wc2.1_30s_elev",
                                                       "M.q708_marketDistance","C.q306_cropLarestAreaHA","A.q112_fEdu_new_num","Caste_marginalized","Plot_owned","A.q111_fGenderdum","nitrogen_0.5cm","sand_0.5cm", "soc_5.15cm")])
summ_stats <- as.data.frame(t(summ_stats))

# Rename some of the columns for convenience
summ_stats <- summ_stats[c("Mean", "Stdev", "Minimum", "1. Quartile", "Median",  "3. Quartile", "Maximum")] 

#%>% 
#  rename("Lower quartile" = '1. Quartile', "Upper quartile"= "3. Quartile")

summ_stats

library(reactable)
library(htmltools)
library(fontawesome)

htmltools::browsable(
  tagList(
    tags$button(
      tagList(fontawesome::fa("download"), "Download as CSV"),
      onclick = "Reactable.downloadDataCSV('summ_stats', 'summ_stats.csv')"
    ),

    reactable(
      summ_stats,
      searchable = TRUE,
      defaultPageSize = 38,
      elementId = "summ_stats"
    )
  )
)
#write.csv(summ_stats,"tables/summ_stats.csv")

# Correlation plot
# library(corrplot)
# Correlations=cor(LDSestim[,c("L.tonPerHectare","G.q5305_irrigTimes","Nperha","P2O5perha","Weedmanaged","variety_type_NMWV","Sowing_Date_Early")],na.rm=TRUE)
# 
# Correlationsplot=corrplot(Correlations)
# Correlationsplot


library(modelsummary)

Sowpercent=datasummary(Sowing_Date_Schedule+1~N + Percent() , data = LDSestim,output = 'data.frame')


library(reactable)
library(htmltools)
library(fontawesome)

htmltools::browsable(
  tagList(
    tags$button(
      tagList(fontawesome::fa("download"), "Download as CSV"),
      onclick = "Reactable.downloadDataCSV('Sowpercent', 'Sowpercent.csv')"
    ),

    reactable(
      Sowpercent,
      searchable = TRUE,
      defaultPageSize = 38,
      elementId = "Sowpercent"
    )
  )
)

Varietypercent=datasummary(D.q410_varName+1~N + Percent() , data = LDSestim_variety,output = 'data.frame')



htmltools::browsable(
  tagList(
    tags$button(
      tagList(fontawesome::fa("download"), "Download as CSV"),
      onclick = "Reactable.downloadDataCSV('Varietypercent', 'Varietypercent.csv')"
    ),

    reactable(
      Varietypercent,
      searchable = TRUE,
      defaultPageSize = 38,
      elementId = "Varietypercent"
    )
  )
)



Herbpercent=datasummary(Herbicidename_cat+1~N + Percent() , data = LDSestim,output = 'data.frame')



htmltools::browsable(
  tagList(
    tags$button(
      tagList(fontawesome::fa("download"), "Download as CSV"),
      onclick = "Reactable.downloadDataCSV('Herbpercent', 'Herbpercent.csv')"
    ),

    reactable(
      Herbpercent,
      searchable = TRUE,
      defaultPageSize = 38,
      elementId = "Herbpercent"
    )
  )
)

Irrigpercent=datasummary(G.q5305_irrigTimes_cat+1~N + Percent() , data = LDSestim,output = 'data.frame')


htmltools::browsable(
  tagList(
    tags$button(
      tagList(fontawesome::fa("download"), "Download as CSV"),
      onclick = "Reactable.downloadDataCSV('Irrigpercent', 'Irrigpercent.csv')"
    ),

    reactable(
     Irrigpercent,
      searchable = TRUE,
      defaultPageSize = 38,
      elementId = "Irrigpercent"
    )
  )
)

```

# Weed management

```{r}
LDSestim_herb=subset(LDSestim, !(is.na(LDSestim$Herbicidename_cat)))


# Multi-arm offline policy evaluation 

library(grf)
library(policytree)

LDSestim_herb=subset(LDSestim_herb, select=c("hhid","Jan_tmin_18","Feb_tmin_18","Mar_tmin_18", "Apr_tmin_18","Jan_tmax_18","Feb_tmax_18","Mar_tmax_18", "Apr_tmax_18","Herbicidename_cat","G.q5305_irrigTimes_cat","Sowing_Date_Schedule_rating_num","L.tonPerHectare","I.q5505_weedSeverity_num","I.q5509_diseaseSeverity_num","I.q5506_insectSeverity_num","I.q5502_droughtSeverity_num",                                       "Nperha","P2O5perha","variety_type_NMWV","G.q5305_irrigTimes","Weedmanaged","temp","precip","wc2.1_30s_elev",
                                                       "M.q708_marketDistance","C.q306_cropLarestAreaHA","A.q112_fEdu_new_num","Caste_marginalized","Plot_owned","A.q111_fGenderdum","nitrogen_0.5cm","sand_0.5cm", "soc_5.15cm","O.largestPlotGPS.Latitude","O.largestPlotGPS.Longitude"))

library(tidyr)
LDSestim_herb=LDSestim_herb %>% drop_na()


Y_cf_herb=as.vector(LDSestim_herb$L.tonPerHectare)
## Causal random forest -----------------

X_cf_herb=subset(LDSestim_herb, select=c("Jan_tmin_18","Feb_tmin_18","Mar_tmin_18", "Apr_tmin_18","Jan_tmax_18","Feb_tmax_18","Mar_tmax_18", "Apr_tmax_18","I.q5505_weedSeverity_num","I.q5509_diseaseSeverity_num","I.q5506_insectSeverity_num",                     "Nperha","P2O5perha","variety_type_NMWV","G.q5305_irrigTimes","Sowing_Date_Schedule_rating_num","A.q111_fGenderdum","temp","precip","wc2.1_30s_elev","M.q708_marketDistance","C.q306_cropLarestAreaHA","A.q112_fEdu_new_num","Caste_marginalized","Plot_owned","nitrogen_0.5cm","sand_0.5cm", "soc_5.15cm","O.largestPlotGPS.Latitude","O.largestPlotGPS.Longitude"))


W_cf_herb <- as.factor(LDSestim_herb$Herbicidename_cat)

W.multi_herb.forest <- probability_forest(X_cf_herb, W_cf_herb,
  equalize.cluster.weights = FALSE,
  seed = 2
)
W.hat.multi.all_herb <- predict(W.multi_herb.forest, estimate.variance = TRUE)$predictions


Y.multi_herb.forest <- regression_forest(X_cf_herb, Y_cf_herb,
  equalize.cluster.weights = FALSE,
  seed = 2
)

print(Y.multi_herb.forest)


varimp.multi_herb <- variable_importance(Y.multi_herb.forest)

Y.hat.multi.all_herb <- predict(Y.multi_herb.forest, estimate.variance = TRUE)$predictions

# Regression tree
# tree_herb <- get_tree(Y.multi_herb.forest, 1)
# plot(tree_herb )


# Causal forest
multi_herb.forest <- multi_arm_causal_forest(X = X_cf_herb, Y = Y_cf_herb, W = W_cf_herb,W.hat=W.hat.multi.all_herb,Y.hat=Y.hat.multi.all_herb,seed=1234) 

varimp.multi_herb_cf <- variable_importance(multi_herb.forest )

multi_herb_ate=average_treatment_effect(multi_herb.forest, method="AIPW")
multi_herb_ate

write.csv(multi_herb_ate,"tables/multi_herb_ate.csv")

# Variable importance plot
 vars=c("Jan_tmin_18","Feb_tmin_18","Mar_tmin_18", "Apr_tmin_18","Jan_tmax_18","Feb_tmax_18","Mar_tmax_18", "Apr_tmax_18","Weed severity","Disease severity","Insect severity",                     "N","Phosphate","Early sown variety","Irrigations","Sowing window","Gender","Annual temp","Annual precip","Elevation","Market distance","Plot size","Education","Caste","Land tenure","Soil nitrogen","Soil sand", "Organic carbon","Latitude","Longitude")

## variable importance plot ----------------------------------------------------
varimpvars=as.data.frame(cbind(varimp.multi_herb_cf,vars))
names(varimpvars)[1]="Variableimportance"
varimpvars$Variableimportance=formatC(varimpvars$Variableimportance, digits = 2, format = "f")
varimpvars$Variableimportance=as.numeric(varimpvars$Variableimportance)

varimpplotRF=ggplot(varimpvars,aes(x=reorder(vars,Variableimportance),
                                   y=Variableimportance))+
   geom_jitter(color="steelblue")+
   coord_flip()+
   labs(x="Weed model variables",y="Variable importance")
 previous_theme <- theme_set(theme_bw(base_size = 16))
 varimpplotRF
 ggsave("figures/varimpplotRF_herb.png",dpi=300,width=5.88, height=5.16)



# Policy tree --------------------------------------
DR.scores_herb <- double_robust_scores(multi_herb.forest)

tr_herb <- policy_tree(X_cf_herb, DR.scores_herb, depth = 2) 
tr_herb
library(DiagrammeR)
plot(tr_herb)

# 
tr_herb3 <- hybrid_policy_tree(X_cf_herb, DR.scores_herb, depth = 3) 
tr_herb3
plot(tr_herb3)

# Depth 4 model

tr_herb4 <- hybrid_policy_tree(X_cf_herb, DR.scores_herb, depth = 4) 
tr_herb4
plot(tr_herb4)

# Treatment assignment using naive procedure 
tr_assignment_herb=LDSestim_herb

tr_assignment_herb$depth2 <- predict(tr_herb, X_cf_herb)
table(tr_assignment_herb$depth2)
tr_assignment_herb$depth3 <- predict(tr_herb3, X_cf_herb)
table(tr_assignment_herb$depth3)
tr_assignment_herb$depth4 <- predict(tr_herb4, X_cf_herb)
table(tr_assignment_herb$depth4)

# Cross-fitting approach  [Athey et al 2024]
n <- nrow(LDSestim_herb)
train <- sample(1:n, 0.5*n)
test <- -train

# Train on a portion of the data
# The argument `depth` controls the depth of the tree.
# Depth k means that we can partition the data into up to 2^(k+1) regions. 

tr_herb_est_eval <- policy_tree(X_cf_herb[train,], DR.scores_herb[train,], depth=2)
plot(tr_herb_est_eval)

tr_herb_est_eval3 <- hybrid_policy_tree(X_cf_herb[train,], DR.scores_herb[train,], depth=3)
plot(tr_herb_est_eval3)

tr_herb_est_eval4 <- hybrid_policy_tree(X_cf_herb[train,], DR.scores_herb[train,], depth=4)
plot(tr_herb_est_eval4)
# Predict on remaining portion
# Note policytree recodes the treatments to 1,2
# We substract one to get back to our usual encoding 0,1.

#tr_assignment_herb$
depth2_est_eval <- predict(tr_herb_est_eval, X_cf_herb[test,])
table(depth2_est_eval)

depth3_est_eval <- predict(tr_herb_est_eval3, X_cf_herb[test,])
table(depth3_est_eval)

depth4_est_eval <- predict(tr_herb_est_eval4, X_cf_herb[test,])
table(depth4_est_eval)

# Value of the learned policy

gamma.hat.herb.1 <- DR.scores_herb[test,1]
gamma.hat.herb.2 <- DR.scores_herb[test,2]
gamma.hat.herb.3 <- DR.scores_herb[test,3]
gamma.hat.herb.4 <- DR.scores_herb[test,4]
gamma.hat.herb.5 <- DR.scores_herb[test,5]

# Testing whether the learned policy value is different from the value attained by the “no-treatment” policy.

LDSestim_herb_test=LDSestim_herb[test,]

herb_test_assignment=cbind(LDSestim_herb_test,gamma.hat.herb.1,gamma.hat.herb.2,gamma.hat.herb.3,gamma.hat.herb.4,gamma.hat.herb.5,depth2_est_eval)

library(fastDummies)

herb_test_assignment=as.data.frame(herb_test_assignment)

herb_test_assignment=fastDummies::dummy_cols(herb_test_assignment, select_columns = "depth2_est_eval")

herb_test_assignment$targeted_policy_val=herb_test_assignment$gamma.hat.herb.5*herb_test_assignment$depth2_est_eval_5+herb_test_assignment$gamma.hat.herb.4*herb_test_assignment$depth2_est_eval_4+herb_test_assignment$gamma.hat.herb.3*herb_test_assignment$depth2_est_eval_3

# Value of targeted policy 
## Targeting vs no weeding
herb_test_assignment$targeted_policy_val_vs_NoWeeding=herb_test_assignment$targeted_policy_val-herb_test_assignment$gamma.hat.herb.1

herb_test_assignment$targeted_policy_val_vs_NoWeeding_perc=(herb_test_assignment$targeted_policy_val_vs_NoWeeding/herb_test_assignment$gamma.hat.herb.1)*100

## Targeting vs manual
herb_test_assignment$targeted_policy_val_vs_Manual=herb_test_assignment$targeted_policy_val-herb_test_assignment$gamma.hat.herb.2

herb_test_assignment$targeted_policy_val_vs_Manual_perc=(herb_test_assignment$targeted_policy_val_vs_Manual/herb_test_assignment$gamma.hat.herb.2)*100

## Targeting vs manual+herb
herb_test_assignment$targeted_policy_val_vs_Manualherb=herb_test_assignment$targeted_policy_val-herb_test_assignment$gamma.hat.herb.3

herb_test_assignment$targeted_policy_val_vs_Manualherb_perc=(herb_test_assignment$targeted_policy_val_vs_Manualherb/herb_test_assignment$gamma.hat.herb.3)*100

## Targeting vs 24D policy
herb_test_assignment$targeted_policy_val_vs_24D=herb_test_assignment$targeted_policy_val-herb_test_assignment$gamma.hat.herb.4

herb_test_assignment$targeted_policy_val_vs_24D_perc=(herb_test_assignment$targeted_policy_val_vs_24D/herb_test_assignment$gamma.hat.herb.4)*100

## Targeting vs MetsuSulfo
herb_test_assignment$targeted_policy_val_vs_MetsuSulfo=herb_test_assignment$targeted_policy_val-herb_test_assignment$gamma.hat.herb.5

herb_test_assignment$targeted_policy_val_vs_MetsuSulfo_perc=(herb_test_assignment$targeted_policy_val_vs_MetsuSulfo/herb_test_assignment$gamma.hat.herb.5)*100
  
summary(herb_test_assignment)

# Table showing percentage advantage of targeted policy over status quo
mean_na <- function(x) mean(x, na.rm = TRUE)
sd_na <- function(x) SD(x, na.rm = TRUE)
p25_na <- function(x) quantile(x, probs = 0.25, na.rm = TRUE)
median_na <- function(x) median(x, na.rm = TRUE)
p75_na <- function(x) quantile(x, probs = 0.75, na.rm = TRUE)

library(modelsummary)
summary_table_by_vars <- datasummary(Heading("N obs") * N + Heading("%") * Percent() + (targeted_policy_val_vs_NoWeeding_perc) * (median_na)+(targeted_policy_val_vs_Manual_perc)* (median_na)+(targeted_policy_val_vs_Manualherb_perc)*(median_na)+(targeted_policy_val_vs_24D_perc)*(median_na)+(targeted_policy_val_vs_MetsuSulfo_perc)*(median_na) ~ Factor(Herbicidename_cat)*Factor(depth2_est_eval), data = herb_test_assignment, output = "data.frame")

summary_table_by_vars_t <- t(summary_table_by_vars)

library(reactable)
library(htmltools)
library(fontawesome)

htmltools::browsable(
    tagList(
        tags$button(
            tagList(fontawesome::fa("download"), "Download as CSV"),
            onclick = "Reactable.downloadDataCSV('summary_table_by_vars_t', 'summary_table_by_vars_t.csv')"
        ),
        reactable(
            summary_table_by_vars_t,
            searchable = TRUE,
            defaultPageSize = 38,
            elementId = "summary_table_by_vars_t"
        )
    )
)


```

## Binary causal RF calibration

```{r}
# Calibration check: Multi-arm causal RF does not yet calibration check
 ## We use binary causal RF to do that

LDSestim_herb$Herbicidename_cat_bin[LDSestim_herb$Herbicidename_cat%in%c("No weeding")]=0

LDSestim_herb$Herbicidename_cat_bin[LDSestim_herb$Herbicidename_cat%in%c("Manual","Manual_herb","2,4-D","SulfosulfuronMetsulfuron")]=1

W_cf_herb_binary=as.vector(LDSestim_herb$Herbicidename_cat_bin) 

# Probability random forest to create weights
W.multi_herb.forest_binary <- regression_forest(X_cf_herb, W_cf_herb_binary,
  equalize.cluster.weights = FALSE,
  seed = 2
)
W.hat.multi.all_herb_binary <- predict(W.multi_herb.forest_binary, estimate.variance = TRUE)$predictions


# Regression forest to get expected responses 
Y.multi_herb.forest_binary <- regression_forest(X_cf_herb, Y_cf_herb,
  equalize.cluster.weights = FALSE,
  seed = 2
)

print(Y.multi_herb.forest_binary)
varimp.multi_herb_binary <- variable_importance(Y.multi_herb.forest_binary)
Y.hat.multi.all_herb_binary <- predict(Y.multi_herb.forest_binary, estimate.variance = TRUE)$predictions

# Fit binary causal RF model
multi_herb.forest_binary <- causal_forest(X = X_cf_herb, Y = Y_cf_herb, W = W_cf_herb_binary ,W.hat=W.hat.multi.all_herb_binary,Y.hat=Y.hat.multi.all_herb_binary,seed=2) 

varimp.multi_herb_cf_binary <- variable_importance(multi_herb.forest_binary)

# Average treatment effects
multi_herb_ate_binary=average_treatment_effect(multi_herb.forest_binary,target.sample = "overlap")
multi_herb_ate_binary

multi_herb_binary_calibration=test_calibration(multi_herb.forest_binary)
multi_herb_binary_calibration





```

# Sowing date model

```{r}
library(grf)
library(policytree)

LDSestim_sow=subset(LDSestim, select=c("hhid","Jan_tmin_18","Feb_tmin_18","Mar_tmin_18", "Apr_tmin_18","Jan_tmax_18","Feb_tmax_18","Mar_tmax_18", "Apr_tmax_18","Sowing_Date_Early","Sowing_Date_Schedule","L.tonPerHectare","I.q5505_weedSeverity_num","I.q5509_diseaseSeverity_num","I.q5506_insectSeverity_num","I.q5502_droughtSeverity_num",                                       "Nperha","P2O5perha","variety_type_NMWV","G.q5305_irrigTimes","A.q111_fGenderdum","Weedmanaged","temp","precip","wc2.1_30s_elev",
                                                       "M.q708_marketDistance","C.q306_cropLarestAreaHA","A.q112_fEdu_new_num","Caste_marginalized","Plot_owned","nitrogen_0.5cm","sand_0.5cm", "soc_5.15cm","O.largestPlotGPS.Latitude","O.largestPlotGPS.Longitude"))

library(tidyr)
LDSestim_sow=LDSestim_sow %>% drop_na()


Y_cf_sowing=as.vector(LDSestim_sow$L.tonPerHectare)
## Causal random forest -----------------

X_cf_sowing=subset(LDSestim_sow, select=c("Jan_tmin_18","Feb_tmin_18","Mar_tmin_18", "Apr_tmin_18","Jan_tmax_18","Feb_tmax_18","Mar_tmax_18", "Apr_tmax_18","I.q5505_weedSeverity_num","I.q5509_diseaseSeverity_num","I.q5506_insectSeverity_num",
                                                  "Nperha","P2O5perha","variety_type_NMWV","G.q5305_irrigTimes","A.q111_fGenderdum","Weedmanaged","temp","precip","wc2.1_30s_elev",
                                                       "M.q708_marketDistance","C.q306_cropLarestAreaHA","A.q112_fEdu_new_num","Caste_marginalized","Plot_owned","nitrogen_0.5cm","sand_0.5cm", "soc_5.15cm","O.largestPlotGPS.Latitude","O.largestPlotGPS.Longitude"))



W_cf_sowing <- as.factor(LDSestim_sow$Sowing_Date_Schedule)

W.multi_sowing.forest <- probability_forest(X_cf_sowing, W_cf_sowing,
  equalize.cluster.weights = FALSE,
  seed = 2
)
W.hat.multi.all_sowing <- predict(W.multi_sowing.forest, estimate.variance = TRUE)$predictions



Y.multi_sowing.forest <- regression_forest(X_cf_sowing, Y_cf_sowing,
  equalize.cluster.weights = FALSE,
  seed = 2
)

print(Y.multi_sowing.forest)
varimp.multi_sowing <- variable_importance(Y.multi_sowing.forest)
Y.hat.multi.all_sowing <- predict(Y.multi_sowing.forest, estimate.variance = TRUE)$predictions



multi_sowing.forest <- multi_arm_causal_forest(X = X_cf_sowing, Y = Y_cf_sowing, W = W_cf_sowing ,W.hat=W.hat.multi.all_sowing,Y.hat=Y.hat.multi.all_sowing,seed=2) 

varimp.multi_sowing_cf <- variable_importance(multi_sowing.forest)

multi_sowing_ate=average_treatment_effect(multi_sowing.forest, method="AIPW")
multi_sowing_ate
write.csv (multi_sowing_ate,"tables/multi_sowing_ate.csv")

varimp.multi_sowing_cf <- variable_importance(multi_sowing.forest)
vars_sowing=c("Jan_tmin_18","Feb_tmin_18","Mar_tmin_18", "Apr_tmin_18","Jan_tmax_18","Feb_tmax_18","Mar_tmax_18", "Apr_tmax_18","Weed severity","Disease severity","Insect severity",                     "N","Phosphate","Early sown variety","Irrigations","Gender","Weeding","Annual temp","Annual precip","Elevation","Market distance","Plot size","Education","Caste","Land tenure","Soil nitrogen","Soil sand", "Organic carbon","Latitude","Longitude")

## variable importance plot ----------------------------------------------------
varimpvars_sowing=as.data.frame(cbind(varimp.multi_sowing_cf,vars_sowing))
names(varimpvars_sowing)[1]="Variableimportance_sowing"
varimpvars_sowing$Variableimportance_sowing=formatC(varimpvars_sowing$Variableimportance_sowing, digits = 2, format = "f")
varimpvars_sowing$Variableimportance_sowing=as.numeric(varimpvars_sowing$Variableimportance_sowing)
varimpplotRF_sowing=ggplot(varimpvars_sowing,aes(x=reorder(vars_sowing,Variableimportance_sowing),y=Variableimportance_sowing))+
   geom_jitter(color="steelblue")+
   coord_flip()+
   labs(x="Sowing model variables",y="Variable importance")
 previous_theme <- theme_set(theme_bw(base_size = 16))
 varimpplotRF_sowing
 ggsave("figures/varimpplotRF_sowing.png",dpi=300, width=5.88, height=5.16)


# Policy tree --------------------------------------
DR.scores_sowing <- double_robust_scores(multi_sowing.forest)

tr_sowing <- policy_tree(X_cf_sowing, DR.scores_sowing, depth = 2) 
plot(tr_sowing)


tr_sowing3 <- hybrid_policy_tree(X_cf_sowing, DR.scores_sowing, depth = 3) 
tr_sowing3
plot(tr_sowing3)

tr_sowing4 <- hybrid_policy_tree(X_cf_sowing, DR.scores_sowing, depth = 4) 
tr_sowing4
plot(tr_sowing4)

tr_assignment_sowing=LDSestim_sow

tr_assignment_sowing$depth2 <- predict(tr_sowing, X_cf_sowing)
table(tr_assignment_sowing$depth2)
tr_assignment_sowing$depth3 <- predict(tr_sowing3, X_cf_sowing)
table(tr_assignment_sowing$depth3)
tr_assignment_sowing$depth4 <- predict(tr_sowing4, X_cf_sowing)
table(tr_assignment_sowing$depth4)

# Cross-fitting approach  [Athey et al 2024]
n <- nrow(LDSestim_sow)
train <- sample(1:n, 0.5*n)
test <- -train

# Train on a portion of the data
# The argument `depth` controls the depth of the tree.
# Depth k means that we can partition the data into up to 2^(k+1) regions. 

tr_sowing_est_eval <- policy_tree(X_cf_sowing[train,], DR.scores_sowing[train,], depth=2)
plot(tr_sowing_est_eval)

tr_sowing_est_eval3 <- hybrid_policy_tree(X_cf_sowing[train,], DR.scores_sowing[train,], depth=3)
plot(tr_sowing_est_eval3)

tr_sowing_est_eval4 <- hybrid_policy_tree(X_cf_sowing[train,], DR.scores_sowing[train,], depth=4)
plot(tr_sowing_est_eval4)
# Predict on remaining portion
# Note policytree recodes the treatments to 1,2
# We substract one to get back to our usual encoding 0,1.

depth2_est_eval_sowing <- predict(tr_sowing_est_eval, X_cf_sowing[test,])

table(depth2_est_eval_sowing)


depth3_est_eval_sowing <- predict(tr_sowing_est_eval3, X_cf_sowing[test,])

table(depth3_est_eval_sowing)

depth4_est_eval_sowing <- predict(tr_sowing_est_eval4, X_cf_sowing[test,])

table(depth4_est_eval_sowing)

# Value of the learned policy
# Value of the learned policy

gamma.hat.sowing.1 <- DR.scores_sowing[test,1]
gamma.hat.sowing.2 <- DR.scores_sowing[test,2]
gamma.hat.sowing.3 <- DR.scores_sowing[test,3]
gamma.hat.sowing.4 <- DR.scores_sowing[test,4]
gamma.hat.sowing.5 <- DR.scores_sowing[test,5]

# Testing whether the learned policy value is different from the value attained by the “no-treatment” policy.

LDSestim_sow_test=LDSestim_sow[test,]
sowing_test_assignment=cbind(LDSestim_sow_test,gamma.hat.sowing.1,gamma.hat.sowing.2,gamma.hat.sowing.3,gamma.hat.sowing.4,gamma.hat.sowing.5,depth2_est_eval_sowing)

library(fastDummies)

sowing_test_assignment=as.data.frame(sowing_test_assignment)

sowing_test_assignment=fastDummies::dummy_cols(sowing_test_assignment, select_columns = "depth2_est_eval_sowing")

sowing_test_assignment$targeted_policy_val=sowing_test_assignment$gamma.hat.sowing.5*sowing_test_assignment$depth2_est_eval_sowing_5+sowing_test_assignment$gamma.hat.sowing.4*sowing_test_assignment$depth2_est_eval_sowing_4

# Value of targeted policy 
sowing_test_assignment$targeted_policy_val_vs_T5_16Dec=sowing_test_assignment$targeted_policy_val-sowing_test_assignment$gamma.hat.sowing.1

sowing_test_assignment$targeted_policy_val_vs_T5_16Dec_perc=(sowing_test_assignment$targeted_policy_val_vs_T5_16Dec/sowing_test_assignment$gamma.hat.sowing.1)*100

sowing_test_assignment$targeted_policy_val_vs_T4_1Dec=sowing_test_assignment$targeted_policy_val-sowing_test_assignment$gamma.hat.sowing.2

sowing_test_assignment$targeted_policy_val_vs_T4_1Dec_perc=(sowing_test_assignment$targeted_policy_val_vs_T4_1Dec/sowing_test_assignment$gamma.hat.sowing.2)*100

sowing_test_assignment$targeted_policy_val_vs_T3_20Nov=sowing_test_assignment$targeted_policy_val-sowing_test_assignment$gamma.hat.sowing.3

sowing_test_assignment$targeted_policy_val_vs_T3_20Nov_perc=(sowing_test_assignment$targeted_policy_val_vs_T3_20Nov/sowing_test_assignment$gamma.hat.sowing.3)*100


sowing_test_assignment$targeted_policy_val_vs_T2_10Nov=sowing_test_assignment$targeted_policy_val-sowing_test_assignment$gamma.hat.sowing.4
sowing_test_assignment$targeted_policy_val_vs_T2_10Nov_perc=(sowing_test_assignment$targeted_policy_val_vs_T2_10Nov/sowing_test_assignment$gamma.hat.sowing.4)*100

sowing_test_assignment$targeted_policy_val_vs_T1_1Nov=sowing_test_assignment$targeted_policy_val-sowing_test_assignment$gamma.hat.sowing.5

sowing_test_assignment$targeted_policy_val_vs_T1_1Nov_perc=(sowing_test_assignment$targeted_policy_val_vs_T1_1Nov/sowing_test_assignment$gamma.hat.sowing.5)*100

  
# Table showing percentage advantage of targeted policy over status quo
mean_na <- function(x) mean(x, na.rm = TRUE)
sd_na <- function(x) SD(x, na.rm = TRUE)
p25_na <- function(x) quantile(x, probs = 0.25, na.rm = TRUE)
median_na <- function(x) median(x, na.rm = TRUE)
p75_na <- function(x) quantile(x, probs = 0.75, na.rm = TRUE)

library(modelsummary)
summary_table_by_vars_sowing <- datasummary(Heading("N obs") * N + Heading("%") * Percent() + (targeted_policy_val_vs_T5_16Dec_perc) * (median_na)+(targeted_policy_val_vs_T4_1Dec_perc)* (median_na)+(targeted_policy_val_vs_T3_20Nov_perc)*(median_na)+(targeted_policy_val_vs_T2_10Nov_perc)*(median_na)+(targeted_policy_val_vs_T1_1Nov_perc)*(median_na) ~ Factor(Sowing_Date_Schedule)*Factor(depth2_est_eval_sowing), data = sowing_test_assignment, output = "data.frame")

summary_table_by_vars_t_sowing <- t(summary_table_by_vars_sowing)

library(reactable)
library(htmltools)
library(fontawesome)

htmltools::browsable(
    tagList(
        tags$button(
            tagList(fontawesome::fa("download"), "Download as CSV"),
            onclick = "Reactable.downloadDataCSV('summary_table_by_vars_t_sowing', 'summary_table_by_vars_t_sowing.csv')"
        ),
        reactable(
            summary_table_by_vars_t_sowing,
            searchable = TRUE,
            defaultPageSize = 38,
            elementId = "summary_table_by_vars_t_sowing"
        )
    )
)



```

## Binary causal RF calibration check

The causal random forest results need to be checked for fit. However, there is no available algorithm to check this for the mult-arm causal RF. We therefore rely on the binary causal RF. Mean and differential forest prediction calibrations are used for such purposes. A coefficient of 1 for mean forest prediction suggests that the mean forest prediction is correct while a coefficient of 1 for differential forest prediction suggests that the forest has captured heterogeneity in the underlying signal (Tibshirani et al 2022). The following code fits the binary.

```{r}
 # Calibration check: Multi-arm causal RF does not yet calibration check
 ## We use binary causal RF to do that
 
W_cf_sowing_binary=as.vector(LDSestim_sow$Sowing_Date_Early) 

# Probability random forest to create weights
W.multi_sowing.forest_binary <- regression_forest(X_cf_sowing, W_cf_sowing_binary,
  equalize.cluster.weights = FALSE,
  seed = 2
)
W.hat.multi.all_sowing_binary <- predict(W.multi_sowing.forest_binary, estimate.variance = TRUE)$predictions


# Regression forest to get expected responses 
Y.multi_sowing.forest_binary <- regression_forest(X_cf_sowing, Y_cf_sowing,
  equalize.cluster.weights = FALSE,
  seed = 2
)

print(Y.multi_sowing.forest_binary)
varimp.multi_sowing_binary <- variable_importance(Y.multi_sowing.forest_binary)
Y.hat.multi.all_sowing_binary <- predict(Y.multi_sowing.forest_binary, estimate.variance = TRUE)$predictions

# Fit binary causal RF model
multi_sowing.forest_binary <- causal_forest(X = X_cf_sowing, Y = Y_cf_sowing, W = W_cf_sowing_binary ,W.hat=W.hat.multi.all_sowing_binary,Y.hat=Y.hat.multi.all_sowing_binary,seed=2) 

varimp.multi_sowing_cf_binary <- variable_importance(multi_sowing.forest_binary)

# Average treatment effects
multi_sowing_ate_binary=average_treatment_effect(multi_sowing.forest_binary,target.sample = "overlap")
multi_sowing_ate_binary

multi_sowing_binary_calibration=test_calibration(multi_sowing.forest_binary)
multi_sowing_binary_calibration

# RATE -------------------------------
library(grf)
tau.hat.cf_sowing <- predict(multi_sowing.forest_binary,X_cf_sowing)$predictions

cf_sowingRATE <- rank_average_treatment_effect(multi_sowing.forest_binary, tau.hat.cf_sowing, target = "AUTOC")
cf_sowingRATE

plot(cf_sowingRATE, xlab = "Early sowing treated fraction")
```

# Irrigation management

```{r}
library(grf)
library(policytree)

LDSestim_irrig=subset(LDSestim, select=c("hhid","Jan_tmin_18","Feb_tmin_18","Mar_tmin_18", "Apr_tmin_18","Jan_tmax_18","Feb_tmax_18","Mar_tmax_18", "Apr_tmax_18","L.tonPerHectare","G.q5305_irrigTimes_cat","I.q5505_weedSeverity_num","I.q5509_diseaseSeverity_num","I.q5506_insectSeverity_num","I.q5502_droughtSeverity_num","Nperha","P2O5perha","variety_type_NMWV","Sowing_Date_Schedule_rating_num","A.q111_fGenderdum","Weedmanaged","temp","precip","wc2.1_30s_elev",
                                                                    "M.q708_marketDistance","C.q306_cropLarestAreaHA","A.q112_fEdu_new_num","Caste_marginalized","Plot_owned","nitrogen_0.5cm","sand_0.5cm", "soc_5.15cm","O.largestPlotGPS.Latitude","O.largestPlotGPS.Longitude"))

library(tidyr)
LDSestim_irrig=LDSestim_irrig %>% drop_na()


Y_cf_irrig=as.vector(LDSestim_irrig$L.tonPerHectare)
## Causal random forest -----------------

X_cf_irrig=subset(LDSestim_irrig, select=c("Jan_tmin_18","Feb_tmin_18","Mar_tmin_18", "Apr_tmin_18","Jan_tmax_18","Feb_tmax_18","Mar_tmax_18", "Apr_tmax_18","I.q5505_weedSeverity_num","I.q5509_diseaseSeverity_num","I.q5506_insectSeverity_num","I.q5502_droughtSeverity_num","Nperha","P2O5perha","variety_type_NMWV","Sowing_Date_Schedule_rating_num","A.q111_fGenderdum","Weedmanaged","temp","precip","wc2.1_30s_elev",
                                                                    "M.q708_marketDistance","C.q306_cropLarestAreaHA","A.q112_fEdu_new_num","Caste_marginalized","Plot_owned","nitrogen_0.5cm","sand_0.5cm", "soc_5.15cm","O.largestPlotGPS.Latitude","O.largestPlotGPS.Longitude"))


W_cf_irrig <- as.factor(LDSestim_irrig$G.q5305_irrigTimes_cat)


W.multi_irrig.forest <- probability_forest(X_cf_irrig, W_cf_irrig,
  equalize.cluster.weights = FALSE,
  seed = 2
)
W.hat.multi.all_irrig <- predict(W.multi_irrig.forest, estimate.variance = TRUE)$predictions




Y.multi_irrig.forest <- regression_forest(X_cf_irrig, Y_cf_irrig,
  equalize.cluster.weights = FALSE,
  seed = 2
)

print(Y.multi_irrig.forest)
varimp.multi_irrig <- variable_importance(Y.multi_irrig.forest)

Y.hat.multi.all_irrig <- predict(Y.multi_irrig.forest, estimate.variance = TRUE)$predictions


multi_irrig.forest <- multi_arm_causal_forest(X = X_cf_irrig, Y = Y_cf_irrig, W = W_cf_irrig,Y.hat =Y.hat.multi.all_irrig,W.hat =W.hat.multi.all_irrig)

mc.pred_irrig <- predict(multi_irrig.forest, drop = TRUE)
tau.hat_irrig <- mc.pred_irrig$predictions
tau.hat_irrig=as.data.frame(tau.hat_irrig)

multi_irrig_ate=average_treatment_effect(multi_irrig.forest, method="AIPW")
multi_irrig_ate
write.csv(multi_irrig_ate,"tables/multi_irrig_ate.csv")

varimp.multi_irrig_cf <- variable_importance(multi_irrig.forest)
vars_irrig=c("Jan_tmin_18","Feb_tmin_18","Mar_tmin_18", "Apr_tmin_18","Jan_tmax_18","Feb_tmax_18","Mar_tmax_18", "Apr_tmax_18","Weed severity","Disease severity","Insect severity","Drought severity",                     "N","Phosphate","Early sown variety","Sowing date","Gender","Weeding","Annual temp","Annual precip","Elevation","Market distance","Plot size","Education","Caste","Land tenure","Soil nitrogen","Soil sand", "Organic carbon","Latitude","Longitude")



## variable importance plot ----------------------------------------------------
varimpvars_irrig=as.data.frame(cbind(varimp.multi_irrig_cf,vars_irrig))
names(varimpvars_irrig)[1]="Variableimportance_irrig"
varimpvars_irrig$Variableimportance_irrig=formatC(varimpvars_irrig$Variableimportance_irrig, digits = 2, format = "f")
varimpvars_irrig$Variableimportance_irrig=as.numeric(varimpvars_irrig$Variableimportance_irrig)
varimpplotRF_irrig=ggplot(varimpvars_irrig,aes(x=reorder(vars_irrig,Variableimportance_irrig),y=Variableimportance_irrig))+
   geom_jitter(color="steelblue")+
   coord_flip()+
   labs(x="Irrigation model variables",y="Variable importance")
 previous_theme <- theme_set(theme_bw(base_size = 16))
 varimpplotRF_irrig
 ggsave("figures/varimpplotRF_irrig.png",dpi=300, width=5.88,height=5.16)


# Policy tree --------------------------------------
DR.scores_irrig <- double_robust_scores(multi_irrig.forest)

tr_irrig <- policy_tree(X_cf_irrig, DR.scores_irrig, depth = 2) 
tr_irrig
plot(tr_irrig)
# Using greedy approach
# Depth 3 model
tr_irrig3 <- hybrid_policy_tree(X_cf_irrig, DR.scores_irrig, depth = 3) 
tr_irrig3
plot(tr_irrig3)


# Depth 4 model

tr_irrig4 <- hybrid_policy_tree(X_cf_irrig, DR.scores_irrig, depth = 4) 
tr_irrig4
plot(tr_irrig4)

# Treatment assignment
tr_assignment_irrig=LDSestim_irrig

tr_assignment_irrig$depth2 <- predict(tr_irrig, X_cf_irrig)
table(tr_assignment_irrig$depth2)
tr_assignment_irrig$depth3 <- predict(tr_irrig3, X_cf_irrig)
table(tr_assignment_irrig$depth3)
tr_assignment_irrig$depth4 <- predict(tr_irrig4, X_cf_irrig)
table(tr_assignment_irrig$depth4)


# Cross-fitting approach  [Athey et al 2024]
n <- nrow(LDSestim_irrig)
train <- sample(1:n, 0.5*n)
test <- -train

# Train on a portion of the data
# The argument `depth` controls the depth of the tree.
# Depth k means that we can partition the data into up to 2^(k+1) regions. 

tr_irrig_est_eval <- policy_tree(X_cf_irrig[train,], DR.scores_irrig[train,], depth=2)
plot(tr_irrig_est_eval)

tr_irrig_est_eval3 <- hybrid_policy_tree(X_cf_irrig[train,], DR.scores_irrig[train,], depth=3)
plot(tr_irrig_est_eval3)

tr_irrig_est_eval4 <- hybrid_policy_tree(X_cf_irrig[train,], DR.scores_irrig[train,], depth=4)
plot(tr_irrig_est_eval4)
# Predict on remaining portion
# Note policytree recodes the treatments to 1,2
# We substract one to get back to our usual encoding 0,1.

depth2_est_eval_irrig <- predict(tr_irrig_est_eval, X_cf_irrig[test,])
table(depth2_est_eval_irrig)


depth3_est_eval_irrig <- predict(tr_irrig_est_eval3, X_cf_irrig[test,])
table(depth3_est_eval_irrig)

depth4_est_eval_irrig <- predict(tr_irrig_est_eval4, X_cf_irrig[test,])
table(depth4_est_eval_irrig)

# Value of the learned policy

gamma.hat.irrig.1 <- DR.scores_irrig[test,1]
gamma.hat.irrig.2 <- DR.scores_irrig[test,2]
gamma.hat.irrig.3 <- DR.scores_irrig[test,3]
gamma.hat.irrig.4 <- DR.scores_irrig[test,4]


# Testing whether the learned policy value is different from the value attained by the “no-treatment” policy.

LDSestim_irrig_test=LDSestim_irrig[test,]

irrig_test_assignment=cbind(LDSestim_irrig_test,gamma.hat.irrig.1,gamma.hat.irrig.2,gamma.hat.irrig.3,gamma.hat.irrig.4,depth2_est_eval_irrig)

library(fastDummies)

irrig_test_assignment=as.data.frame(irrig_test_assignment)

irrig_test_assignment=fastDummies::dummy_cols(irrig_test_assignment, select_columns = "depth2_est_eval_irrig")

irrig_test_assignment$targeted_policy_val=irrig_test_assignment$gamma.hat.irrig.4*irrig_test_assignment$depth2_est_eval_irrig_4+irrig_test_assignment$gamma.hat.irrig.3*irrig_test_assignment$depth2_est_eval_irrig_3+irrig_test_assignment$gamma.hat.irrig.1*irrig_test_assignment$depth2_est_eval_irrig_1

# Value of targeted policy 
irrig_test_assignment$targeted_policy_val_vs_irrig1=irrig_test_assignment$targeted_policy_val-irrig_test_assignment$gamma.hat.irrig.1

irrig_test_assignment$targeted_policy_val_vs_irrig1_perc=(irrig_test_assignment$targeted_policy_val_vs_irrig1/irrig_test_assignment$gamma.hat.irrig.1)*100

irrig_test_assignment$targeted_policy_val_vs_irrig2=irrig_test_assignment$targeted_policy_val-irrig_test_assignment$gamma.hat.irrig.2

irrig_test_assignment$targeted_policy_val_vs_irrig2_perc=(irrig_test_assignment$targeted_policy_val_vs_irrig2/irrig_test_assignment$gamma.hat.irrig.2)*100

irrig_test_assignment$targeted_policy_val_vs_irrig3=irrig_test_assignment$targeted_policy_val-irrig_test_assignment$gamma.hat.irrig.3

irrig_test_assignment$targeted_policy_val_vs_irrig3_perc=(irrig_test_assignment$targeted_policy_val_vs_irrig3/irrig_test_assignment$gamma.hat.irrig.2)*100

irrig_test_assignment$targeted_policy_val_vs_irrig4=irrig_test_assignment$targeted_policy_val-irrig_test_assignment$gamma.hat.irrig.4

irrig_test_assignment$targeted_policy_val_vs_irrig4_perc=(irrig_test_assignment$targeted_policy_val_vs_irrig4/irrig_test_assignment$gamma.hat.irrig.2)*100

  
# Table showing percentage advantage of targeted policy over status quo
mean_na <- function(x) mean(x, na.rm = TRUE)
sd_na <- function(x) SD(x, na.rm = TRUE)
p25_na <- function(x) quantile(x, probs = 0.25, na.rm = TRUE)
median_na <- function(x) median(x, na.rm = TRUE)
p75_na <- function(x) quantile(x, probs = 0.75, na.rm = TRUE)

library(modelsummary)
summary_table_by_vars_irrig <- datasummary(Heading("N obs") * N + Heading("%") * Percent() + (targeted_policy_val_vs_irrig1_perc)* (median_na)+(targeted_policy_val_vs_irrig2_perc)*(median_na)+(targeted_policy_val_vs_irrig3_perc)*(median_na)+(targeted_policy_val_vs_irrig4_perc)*(median_na) ~ Factor(G.q5305_irrigTimes_cat)*Factor(depth2_est_eval_irrig), data = irrig_test_assignment, output = "data.frame")

summary_table_by_vars_t_irrig <- t(summary_table_by_vars_irrig)

library(reactable)
library(htmltools)
library(fontawesome)

htmltools::browsable(
    tagList(
        tags$button(
            tagList(fontawesome::fa("download"), "Download as CSV"),
            onclick = "Reactable.downloadDataCSV('summary_table_by_vars_t_irrig', 'summary_table_by_vars_t_irrig.csv')"
        ),
        reactable(
            summary_table_by_vars_t_irrig,
            searchable = TRUE,
            defaultPageSize = 38,
            elementId = "summary_table_by_vars_t_irrig"
        )
    )
)




```

## Binary causal RF calibration check

The causal random forest results need to be checked for fit. However, there is no available algorithm to check this for the mult-arm causal RF. We therefore rely on the binary causal RF. Mean and differential forest prediction calibrations are used for such purposes. A coefficient of 1 for mean forest prediction suggests that the mean forest prediction is correct while a coefficient of 1 for differential forest prediction suggests that the forest has captured heterogeneity in the underlying signal (Tibshirani et al 2022). The following code fits the binary.

```{r}
 # Calibration check: Multi-arm causal RF does not yet calibration check
 ## We use binary causal RF to do that

LDSestim_irrig$G.q5305_irrigTimes_three_plus[LDSestim_irrig$G.q5305_irrigTimes_cat%in%c("Three","Fourplus")]=1

LDSestim_irrig$G.q5305_irrigTimes_three_plus[LDSestim_irrig$G.q5305_irrigTimes_cat%in%c("One","Two")]=0

W_cf_irrig_binary=as.vector(LDSestim_irrig$G.q5305_irrigTimes_three_plus)

# Probability random forest to create weights
W.multi_irrig.forest_binary <- regression_forest(X_cf_irrig, W_cf_irrig_binary,
  equalize.cluster.weights = FALSE,
  seed = 2)

W.hat.multi.all_irrig_binary <- predict(W.multi_irrig.forest_binary, estimate.variance = TRUE)$predictions


# Regression forest to get expected responses
Y.multi_irrig.forest_binary <- regression_forest(X_cf_irrig, Y_cf_irrig,
  equalize.cluster.weights = FALSE,
  seed = 2
)

print(Y.multi_irrig.forest_binary)
varimp.multi_irrig_binary <- variable_importance(Y.multi_irrig.forest_binary)
Y.hat.multi.all_irrig_binary <- predict(Y.multi_irrig.forest_binary, estimate.variance = TRUE)$predictions

# Fit binary causal RF model
multi_irrig.forest_binary <- causal_forest(X = X_cf_irrig, Y = Y_cf_irrig, W = W_cf_irrig_binary ,W.hat=W.hat.multi.all_irrig_binary,Y.hat=Y.hat.multi.all_irrig_binary,seed=2)

varimp.multi_irrig_cf_binary <- variable_importance(multi_irrig.forest_binary)

# Average treatment effects
multi_irrig_ate_binary=average_treatment_effect(multi_irrig.forest_binary,target.sample = "overlap")
multi_irrig_ate_binary

multi_irrig_binary_calibration=test_calibration(multi_irrig.forest_binary)
multi_irrig_binary_calibration

# RATE -------------------------------
library(grf)
#tau.hat.cf_irrig <- predict(multi_irrig.forest_binary,X_cf_irrig)$predictions

#cf_irrigRATE <- rank_average_treatment_effect(multi_irrig.forest_binary, tau.hat.cf_irrig, target = "AUTOC")
#cf_irrigRATE

#plot(cf_irrigRATE, xlab = "Three or more irrigations treated fraction")
```

# Varieties

```{r}
table_varieties=sort(xtabs(~LDS$D.varName))
table_varieties

#LDSestim$D.q410_varName[LDSestim$D.q410_varName=="NL1"]=NA
LDSestim$D.q410_varName[LDSestim$D.q410_varName=="ShriRam 303"]="SUPER303"

LDSestim_variety=subset(LDSestim,LDSestim$D.q410_varName%in%c("PBW343","UP262","LOK1","HD2967","PBW154","Kedar","SUPER303","PBW502","HD2733","HUW234","RR21","Local"))

LDSestim_variety$D.q410_varName=ordered(LDSestim_variety$D.q410_varName,levels=c("HD2967","Local","PBW343","UP262","LOK1","PBW154","Kedar","SUPER303","PBW502","HD2733","HUW234","RR21"))

library(grf)
library(policytree)

LDSestim_variety=subset(LDSestim_variety, select=c("hhid","Jan_tmin_18","Feb_tmin_18","Mar_tmin_18", "Apr_tmin_18","Jan_tmax_18","Feb_tmax_18","Mar_tmax_18", "Apr_tmax_18","D.q410_varName","G.q5305_irrigTimes_cat","Sowing_Date_Schedule_rating_num","L.tonPerHectare","I.q5505_weedSeverity_num","I.q5509_diseaseSeverity_num","I.q5506_insectSeverity_num","I.q5502_droughtSeverity_num",                                       "Nperha","P2O5perha","variety_type_NMWV","G.q5305_irrigTimes","A.q111_fGenderdum","Weedmanaged","temp","precip","wc2.1_30s_elev",
                                                       "M.q708_marketDistance","C.q306_cropLarestAreaHA","A.q112_fEdu_new_num","Caste_marginalized","Plot_owned","nitrogen_0.5cm","sand_0.5cm", "soc_5.15cm","O.largestPlotGPS.Latitude","O.largestPlotGPS.Longitude"))


library(tidyr)
LDSestim_variety=LDSestim_variety %>% drop_na()


Y_cf_variety=as.vector(LDSestim_variety$L.tonPerHectare)
## Causal random forest -----------------

X_cf_variety=subset(LDSestim_variety, select=c("Jan_tmin_18","Feb_tmin_18","Mar_tmin_18", "Apr_tmin_18","Jan_tmax_18","Feb_tmax_18","Mar_tmax_18", "Apr_tmax_18","I.q5505_weedSeverity_num","I.q5509_diseaseSeverity_num","I.q5506_insectSeverity_num",
                                                  "Nperha","P2O5perha","G.q5305_irrigTimes","Sowing_Date_Schedule_rating_num","A.q111_fGenderdum","Weedmanaged","temp","precip","wc2.1_30s_elev",
                                                       "M.q708_marketDistance","C.q306_cropLarestAreaHA","A.q112_fEdu_new_num","Caste_marginalized","Plot_owned","nitrogen_0.5cm","sand_0.5cm", "soc_5.15cm","O.largestPlotGPS.Latitude","O.largestPlotGPS.Longitude"))


W_cf_variety <- as.factor(LDSestim_variety$D.q410_varName)

W.multi_variety.forest <- probability_forest(X_cf_variety, W_cf_variety,
  equalize.cluster.weights = FALSE,
  seed = 2
)
W.hat.multi.all_variety <- predict(W.multi_variety.forest, estimate.variance = TRUE)$predictions


Y.multi_variety.forest <- regression_forest(X_cf_variety, Y_cf_variety,
  equalize.cluster.weights = FALSE,
  seed = 2
)

print(Y.multi_variety.forest)

varimp.multi_variety <- variable_importance(Y.multi_variety.forest)
Y.hat.multi.all_variety <- predict(Y.multi_variety.forest, estimate.variance = TRUE)$predictions


multi_variety.forest <- multi_arm_causal_forest(X = X_cf_variety, Y = Y_cf_variety, W = W_cf_variety,W.hat =W.hat.multi.all_variety , Y.hat=Y.hat.multi.all_variety, seed=1234) 



multi_variety_ate=average_treatment_effect(multi_variety.forest, method="AIPW")
multi_variety_ate
write.csv(multi_variety_ate,"tables/multi_variety_ate.csv")

varimp.multi_variety_cf <- variable_importance(multi_variety.forest)
vars_variety=c("Jan_tmin_18","Feb_tmin_18","Mar_tmin_18", "Apr_tmin_18","Jan_tmax_18","Feb_tmax_18","Mar_tmax_18", "Apr_tmax_18","Weed severity","Disease severity","Insect severity",    "N","Phosphate","Irrigations","Sowing date","Gender","Weeding","Annual temp","Annual precip","Elevation","Market distance","Plot size","Education","Caste","Land tenure","Soil nitrogen","Soil sand", "Organic carbon","Latitude","Longitude")



## variable importance plot ----------------------------------------------------
varimpvars_variety=as.data.frame(cbind(varimp.multi_variety_cf,vars_variety))
names(varimpvars_variety)[1]="Variableimportance_variety"
varimpvars_variety$Variableimportance_variety=formatC(varimpvars_variety$Variableimportance_variety, digits = 2, format = "f")

varimpvars_variety$Variableimportance_variety=as.numeric(varimpvars_variety$Variableimportance_variety)
varimpplotRF_variety=ggplot(varimpvars_variety,aes(x=reorder(vars_variety,Variableimportance_variety),y=Variableimportance_variety))+
   geom_jitter(color="steelblue")+
   coord_flip()+
   labs(x="Variety model variables",y="Variable importance")
 previous_theme <- theme_set(theme_bw(base_size = 16))
 varimpplotRF_variety
 ggsave("figures/varimpplotRF_variety.png",dpi=300, width=5.88, height=5.16)

# Policy tree --------------------------------------
DR.scores_variety <- double_robust_scores(multi_variety.forest)

tr_variety <- policy_tree(X_cf_variety, DR.scores_variety, depth = 2) 
tr_variety
plot(tr_variety)

tr_variety3 <- hybrid_policy_tree(X_cf_variety, DR.scores_variety, depth = 3) 
tr_variety3
plot(tr_variety3)

tr_variety4 <- hybrid_policy_tree(X_cf_variety, DR.scores_variety, depth = 4) 
tr_variety4
plot(tr_variety4)

tr_assignment_variety=LDSestim_variety

tr_assignment_variety$depth2 <- predict(tr_variety, X_cf_variety)
table(tr_assignment_variety$depth2)


tr_assignment_variety$depth3 <- predict(tr_variety3, X_cf_variety)
table(tr_assignment_variety$depth3)
tr_assignment_variety$depth4 <- predict(tr_variety4, X_cf_variety)

table(tr_assignment_variety$depth4)

# 

# Saving a plot in a vectorized SVG format can be done with the `DiagrammeRsvg` package. install.packages("DiagrammeRsvg")

library(DiagrammeRsvg)

#cat(DiagrammeRsvg::export_svg(tr_variety), file = 'figures/tr_variety.svg')
#cat(DiagrammeRsvg::export_svg(tr_variety3), file = 'figures/tr_variety3.svg')
#cat(DiagrammeRsvg::export_svg(tr_variety4), file = 'figures/tr_variety4.svg')

# Cross-fitting approach  [Athey et al 2024]
n <- nrow(LDSestim_variety)
train <- sample(1:n, 0.5*n)
test <- -train

# Train on a portion of the data
# The argument `depth` controls the depth of the tree.
# Depth k means that we can partition the data into up to 2^(k+1) regions. 

tr_variety_est_eval <- policy_tree(X_cf_variety[train,], DR.scores_variety[train,], depth=2)
plot(tr_variety_est_eval)

tr_variety_est_eval3 <- hybrid_policy_tree(X_cf_variety[train,], DR.scores_variety[train,], depth=3)
plot(tr_variety_est_eval3)

tr_variety_est_eval4 <- hybrid_policy_tree(X_cf_variety[train,], DR.scores_variety[train,], depth=4)
plot(tr_variety_est_eval4)
# Predict on remaining portion
# Note policytree recodes the treatments to 1,2
# We substract one to get back to our usual encoding 0,1.

depth2_est_eval_variety <- predict(tr_variety_est_eval, X_cf_variety[test,])
table(depth2_est_eval_variety)


depth3_est_eval_variety <- predict(tr_variety_est_eval3, X_cf_variety[test,])
table(depth3_est_eval_variety)

depth4_est_eval_variety <- predict(tr_variety_est_eval4, X_cf_variety[test,])
table(depth4_est_eval_variety)


# Value of the learned policy

gamma.hat.variety.1 <- DR.scores_variety[test,1]
gamma.hat.variety.2 <- DR.scores_variety[test,2]
gamma.hat.variety.3 <- DR.scores_variety[test,3]
gamma.hat.variety.4 <- DR.scores_variety[test,4]
gamma.hat.variety.5 <- DR.scores_variety[test,5]
gamma.hat.variety.6 <- DR.scores_variety[test,6]
gamma.hat.variety.7 <- DR.scores_variety[test,7]
gamma.hat.variety.8 <- DR.scores_variety[test,8]
gamma.hat.variety.9 <- DR.scores_variety[test,9]
gamma.hat.variety.10 <- DR.scores_variety[test,10]
gamma.hat.variety.11 <- DR.scores_variety[test,11]
gamma.hat.variety.12 <- DR.scores_variety[test,12]


# Testing whether the learned policy value is different from the value attained by the “no-treatment” policy.

LDSestim_variety_test=LDSestim_variety[test,]

variety_test_assignment=cbind(LDSestim_variety_test,gamma.hat.variety.1,gamma.hat.variety.2,gamma.hat.variety.3,gamma.hat.variety.4,gamma.hat.variety.5,gamma.hat.variety.6,gamma.hat.variety.7,gamma.hat.variety.8, gamma.hat.variety.9,gamma.hat.variety.10,gamma.hat.variety.11,gamma.hat.variety.12,depth2_est_eval_variety)

library(fastDummies)

variety_test_assignment=as.data.frame(variety_test_assignment)

variety_test_assignment=fastDummies::dummy_cols(variety_test_assignment, select_columns = "depth2_est_eval_variety")

variety_test_assignment$targeted_policy_val=variety_test_assignment$gamma.hat.variety.10*variety_test_assignment$depth2_est_eval_variety_10+variety_test_assignment$gamma.hat.variety.8*variety_test_assignment$depth2_est_eval_variety_8+variety_test_assignment$gamma.hat.variety.1*variety_test_assignment$depth2_est_eval_variety_1

# Value of targeted policy 
variety_test_assignment$targeted_policy_val_vs_variety_HD2967=variety_test_assignment$targeted_policy_val-variety_test_assignment$gamma.hat.variety.1

variety_test_assignment$targeted_policy_val_vs_variety_HD2967_perc=(variety_test_assignment$targeted_policy_val_vs_variety_HD2967/variety_test_assignment$gamma.hat.variety.1)*100


variety_test_assignment$targeted_policy_val_vs_variety_SUPER303=variety_test_assignment$targeted_policy_val-variety_test_assignment$gamma.hat.variety.8

variety_test_assignment$targeted_policy_val_vs_variety_SUPER303_perc=(variety_test_assignment$targeted_policy_val_vs_variety_SUPER303/variety_test_assignment$gamma.hat.variety.8)*100

variety_test_assignment$targeted_policy_val_vs_variety_HD2733=variety_test_assignment$targeted_policy_val-variety_test_assignment$gamma.hat.variety.10

variety_test_assignment$targeted_policy_val_vs_variety_HD2733_perc=(variety_test_assignment$targeted_policy_val_vs_variety_HD2733/variety_test_assignment$gamma.hat.variety.10)*100

  
# Table showing percentage advantage of targeted policy over status quo
mean_na <- function(x) mean(x, na.rm = TRUE)
sd_na <- function(x) SD(x, na.rm = TRUE)
p25_na <- function(x) quantile(x, probs = 0.25, na.rm = TRUE)
median_na <- function(x) median(x, na.rm = TRUE)
p75_na <- function(x) quantile(x, probs = 0.75, na.rm = TRUE)

library(modelsummary)
summary_table_by_vars_variety <- datasummary(Heading("N obs") * N + Heading("%") * Percent() +(targeted_policy_val_vs_variety_HD2967_perc)*(median_na)+(targeted_policy_val_vs_variety_SUPER303_perc)*(median_na)+(targeted_policy_val_vs_variety_HD2733_perc)*(median_na) ~ Factor(D.q410_varName)*Factor(depth2_est_eval_variety), data = variety_test_assignment, output = "data.frame")

summary_table_by_vars_t_variety <- t(summary_table_by_vars_variety)

library(reactable)
library(htmltools)
library(fontawesome)

htmltools::browsable(
    tagList(
        tags$button(
            tagList(fontawesome::fa("download"), "Download as CSV"),
            onclick = "Reactable.downloadDataCSV('summary_table_by_vars_t_variety', 'summary_table_by_vars_t_variety.csv')"
        ),
        reactable(
            summary_table_by_vars_t_variety,
            searchable = TRUE,
            defaultPageSize = 38,
            elementId = "summary_table_by_vars_t_variety"
        )
    )
)


```

## Binary causal RF calibration check

The causal random forest results need to be checked for fit. However, there is no available algorithm to check this for the mult-arm causal RF. We therefore rely on the binary causal RF. Mean and differential forest prediction calibrations are used for such purposes. A coefficient of 1 for mean forest prediction suggests that the mean forest prediction is correct while a coefficient of 1 for differential forest prediction suggests that the forest has captured heterogeneity in the underlying signal (Tibshirani et al 2022). The following code fits the binary.

```{r}
 # Calibration check: Multi-arm causal RF does not yet calibration check
 ## We use binary causal RF to do that
 
W_cf_variety_binary=as.vector(LDSestim_variety$variety_type_NMWV) 

# Probability random forest to create weights
W.multi_variety.forest_binary <- regression_forest(X_cf_variety, W_cf_variety_binary,
  equalize.cluster.weights = FALSE,
  seed = 2
)
W.hat.multi.all_variety_binary <- predict(W.multi_variety.forest_binary, estimate.variance = TRUE)$predictions


# Regression forest to get expected responses 
Y.multi_variety.forest_binary <- regression_forest(X_cf_variety, Y_cf_variety,
  equalize.cluster.weights = FALSE,
  seed = 2
)

print(Y.multi_variety.forest_binary)
varimp.multi_variety_binary <- variable_importance(Y.multi_variety.forest_binary)

Y.hat.multi.all_variety_binary <- predict(Y.multi_variety.forest_binary, estimate.variance = TRUE)$predictions

# Fit binary causal RF model
multi_variety.forest_binary <- causal_forest(X = X_cf_variety, Y = Y_cf_variety, W = W_cf_variety_binary ,W.hat=W.hat.multi.all_variety_binary,Y.hat=Y.hat.multi.all_variety_binary,seed=2) 

varimp.multi_variety_cf_binary <- variable_importance(multi_variety.forest_binary)

# Average treatment effects
multi_variety_ate_binary=average_treatment_effect(multi_variety.forest_binary,target.sample = "overlap")
multi_variety_ate_binary

multi_variety_binary_calibration=test_calibration(multi_variety.forest_binary)
multi_variety_binary_calibration
```

# Mapping and cross targeting

## Weed management

```{r}
#library(rgdal)

library(geodata)

India=gadm(country="IND", level=2,path=tempdir())
plot(India)
India_aoi=subset(India,India$NAME_1=="Bihar"|India$NAME_2%in%c("Ballia","Chandauli","Deoria","Ghazipur","Kushinagar","Maharajganj","Mau","Siddharth Nagar","Gorakhpur"))

plot(India_aoi)

plot(India_aoi, add=TRUE)

library(sf)
India_aoi_sf=st_as_sf(India_aoi)

library(fastDummies)

tr_assignment_herb$depth2_cat[tr_assignment_herb$depth2==1]="No weeding"
tr_assignment_herb$depth2_cat[tr_assignment_herb$depth2==2]="Manual"
tr_assignment_herb$depth2_cat[tr_assignment_herb$depth2==3]="Manual+Herbicide"
tr_assignment_herb$depth2_cat[tr_assignment_herb$depth2==4]="2,4-D"
tr_assignment_herb$depth2_cat[tr_assignment_herb$depth2==5]="SulfosulfuronMetsulfuron"

tr_assignment_herbsp= SpatialPointsDataFrame(cbind(tr_assignment_herb$O.largestPlotGPS.Longitude,tr_assignment_herb$O.largestPlotGPS.Latitude),data=tr_assignment_herb,proj4string=CRS("+proj=longlat +datum=WGS84"))



library(mapview)
mapviewOptions(fgb = FALSE)
tr_assignment_herbspmapview=mapview(tr_assignment_herbsp,zcol="depth2_cat",layer.name = 'Recommended weed management')
tr_assignment_herbspmapview

# Using tmap
library(tmap)

tr_assignment_herb_tmap=tm_shape(India_aoi_sf) + 
  tm_borders(alpha=.4) + 
  tm_shape(tr_assignment_herbsp)+
  tm_dots(col = "depth2_cat",scale = 2.5,palette = "Dark2", title="Targeted weed management") 
tr_assignment_herb_tmap

tmap_save(tr_assignment_herb_tmap,"figures/tr_assignment_herb_tmap.png", dpi=300,width=3.88,height = 3.16)





```

## Sowing

```{r}

#library(rgdal)

tr_assignment_sowing$depth2_cat[tr_assignment_sowing$depth2==1]="T5_16Dec"
tr_assignment_sowing$depth2_cat[tr_assignment_sowing$depth2==2]="T4_15Dec"
tr_assignment_sowing$depth2_cat[tr_assignment_sowing$depth2==3]="T3_30Nov"
tr_assignment_sowing$depth2_cat[tr_assignment_sowing$depth2==4]="T2_20Nov"
tr_assignment_sowing$depth2_cat[tr_assignment_sowing$depth2==5]="T1_10Nov"

tr_assignment_sowingsp= SpatialPointsDataFrame(cbind(tr_assignment_sowing$O.largestPlotGPS.Longitude,tr_assignment_sowing$O.largestPlotGPS.Latitude),data=tr_assignment_sowing,proj4string=CRS("+proj=longlat +datum=WGS84"))



library(mapview)
mapviewOptions(fgb = FALSE)
tr_assignment_sowingspmapview=mapview(tr_assignment_sowingsp,zcol="depth2_cat",layer.name="Recommended sowing dates")
tr_assignment_sowingspmapview

 # mapshot(tr_assignment_sowingspmapview, url = paste0(getwd(), "/figures/tr_assignment_sowingspmapview.html"),
 #         file = paste0(getwd(), "/figures/tr_assignment_sowingspmapview.png"))

library(tmap)

tr_assignment_sowing_tmap=tm_shape(India_aoi_sf) + 
  tm_borders(alpha=.4) + 
  tm_shape(tr_assignment_sowingsp)+
  tm_dots(col = "depth2_cat",scale = 2.5,palette = "Dark2", title="Targeted sowing window") 
tr_assignment_sowing_tmap

tmap_save(tr_assignment_sowing_tmap,"figures/tr_assignment_sowing_tmap.png", dpi=300,width=3.88,height = 3.16)


```

## Irrigation

```{r}
#library(rgdal)

tr_assignment_irrig$depth2_cat[tr_assignment_irrig$depth2==1]="1"
tr_assignment_irrig$depth2_cat[tr_assignment_irrig$depth2==2]="2"
tr_assignment_irrig$depth2_cat[tr_assignment_irrig$depth2==3]="3"
tr_assignment_irrig$depth2_cat[tr_assignment_irrig$depth2==4]="4"


tr_assignment_irrigsp= SpatialPointsDataFrame(cbind(tr_assignment_irrig$O.largestPlotGPS.Longitude,tr_assignment_irrig$O.largestPlotGPS.Latitude),data=tr_assignment_irrig,proj4string=CRS("+proj=longlat +datum=WGS84"))



library(mapview)
mapviewOptions(fgb = FALSE)
tr_assignment_irrigspmapview=mapview(tr_assignment_irrigsp,zcol="depth2_cat",layer.name = 'Recommended irrigations')
tr_assignment_irrigspmapview


library(tmap)

tr_assignment_irrig_tmap=tm_shape(India_aoi_sf) + 
  tm_borders(alpha=.4) + 
  tm_shape(tr_assignment_irrigsp)+
  tm_dots(col = "depth2_cat",scale = 2.5,palette = "Dark2", title="Targeted irrigations") 
tr_assignment_irrig_tmap

tmap_save(tr_assignment_irrig_tmap,"figures/tr_assignment_irrig_tmap.png", dpi=300,width=3.88,height = 3.16)
```

## Varieties

```{r}
#library(rgdal)

#1: HD2967 2: Local 3: PBW343 4: UP262 5: LOK1 6: PBW154 7: Kedar 8: SUPER303 9: PBW502 10: HD2733 11: HUW234 12: RR21 

tr_assignment_variety$depth2_cat[tr_assignment_variety$depth2==1]="HD2967"
tr_assignment_variety$depth2_cat[tr_assignment_variety$depth2==2]="Local"
tr_assignment_variety$depth2_cat[tr_assignment_variety$depth2==3]="PBW343"
tr_assignment_variety$depth2_cat[tr_assignment_variety$depth2==4]="UP262"
tr_assignment_variety$depth2_cat[tr_assignment_variety$depth2==5]="LOK1"
tr_assignment_variety$depth2_cat[tr_assignment_variety$depth2==6]="PBW154"
tr_assignment_variety$depth2_cat[tr_assignment_variety$depth2==7]="Kedar"
tr_assignment_variety$depth2_cat[tr_assignment_variety$depth2==8]="SUPER303"
tr_assignment_variety$depth2_cat[tr_assignment_variety$depth2==9]="PBW502"
tr_assignment_variety$depth2_cat[tr_assignment_variety$depth2==10]="HD2733"
tr_assignment_variety$depth2_cat[tr_assignment_variety$depth2==11]="HUW234"
tr_assignment_variety$depth2_cat[tr_assignment_variety$depth2==12]="RR21"

tr_assignment_varietysp= SpatialPointsDataFrame(cbind(tr_assignment_variety$O.largestPlotGPS.Longitude,tr_assignment_variety$O.largestPlotGPS.Latitude),data=tr_assignment_variety,proj4string=CRS("+proj=longlat +datum=WGS84"))



library(mapview)
mapviewOptions(fgb = FALSE)
tr_assignment_varietyspmapview=mapview(tr_assignment_varietysp,zcol="depth2_cat",layer.name = 'Recommended variety')
tr_assignment_varietyspmapview

library(geodata)

India=gadm(country="IND", level=2,path=tempdir())
plot(India)
India_aoi=subset(India,India$NAME_1=="Bihar"|India$NAME_2%in%c("Ballia","Chandauli","Deoria","Ghazipur","Kushinagar","Maharajganj","Mau","Siddharth Nagar","Gorakhpur"))

plot(India_aoi)

plot(India_aoi, add=TRUE)

library(sf)
India_aoi_sf=st_as_sf(India_aoi)

library(tmap)

tr_assignment_variety_tmap=tm_shape(India_aoi_sf) + 
  tm_borders(alpha=.4) + 
  tm_shape(tr_assignment_varietysp)+
  tm_dots(col = "depth2_cat",scale = 2.5,palette = "Dark2", title="Targeted varieties") 
tr_assignment_variety_tmap

tmap_save(tr_assignment_variety_tmap,"figures/tr_assignment_variety_tmap.png", dpi=300,width=3.88,height = 3.16)
  

```

## Geomatching and combined recommendations

```{r}
# colnames(tr_assignment_herbsp@data)<-paste(colnames(tr_assignment_herbsp@data),"herb",sep="_")
# 
# table(tr_assignment_herbsp$depth2_cat_herb)
# 
# colnames(tr_assignment_sowingsp@data)<-paste(colnames(tr_assignment_sowingsp@data),"sowing",sep="_")
# 
# colnames(tr_assignment_irrigsp@data)<-paste(colnames(tr_assignment_irrigsp@data),"irrig",sep="_")
# 
# colnames(tr_assignment_varietysp@data)<-paste(colnames(tr_assignment_varietysp@data),"variety",sep="_")

# Merge
#tr_assigment_herb_sow=merge(tr_assignment_herbsp,tr_assignment_sowingsp@data, by.x=c("O.largestPlotGPS.Latitude_herb","O.largestPlotGPS.Longitude_herb","Nperha_herb"), by.y=c("O.largestPlotGPS.Latitude_sowing","O.largestPlotGPS.Longitude_sowing","Nperha_sowing"))





```

# Distributional comparisons

## Weed management

```{r}
library(ggplot2)
library(ggridges)
library(reshape2)

tau.multi_herb.forest=predict(multi_herb.forest, target.sample = "all",estimate.variance=TRUE)

tau.multi_herb.forest=as.data.frame(tau.multi_herb.forest)


tau.multi_herb.forest_X=data.frame(LDSestim_herb,tau.multi_herb.forest)


# Ridges -------------------
tau.multi_herb.forest_pred=tau.multi_herb.forest[,1:4]

library(dplyr)
tau.multi_herb.forest_pred=rename(tau.multi_herb.forest_pred,"Manual-No weeding"="predictions.Manual...No.weeding.Y.1")

tau.multi_herb.forest_pred=rename(tau.multi_herb.forest_pred,"Manual_herb-No weeding"="predictions.Manual_herb...No.weeding.Y.1")

tau.multi_herb.forest_pred=rename(tau.multi_herb.forest_pred,"2,4-D -No weeding"="predictions.2.4.D...No.weeding.Y.1")

tau.multi_herb.forest_pred=rename(tau.multi_herb.forest_pred,"SulfosulfuronMetsulfuron-No weeding"="predictions.SulfosulfuronMetsulfuron...No.weeding.Y.1")


tau.multi_herb.forest_pred_long=melt(tau.multi_herb.forest_pred[,1:4])

tau.multi_herb.forest_pred_long$variable2[tau.multi_herb.forest_pred_long$variable=="SulfosulfuronMetsulfuron-No weeding"]="S&M"

tau.multi_herb.forest_pred_long$variable2[tau.multi_herb.forest_pred_long$variable=="Manual-No weeding"]="Manual"

tau.multi_herb.forest_pred_long$variable2[tau.multi_herb.forest_pred_long$variable=="Manual_herb-No weeding"]="Manual+Herbicide"

tau.multi_herb.forest_pred_long$variable2[tau.multi_herb.forest_pred_long$variable=="2,4-D -No weeding"]="2,4-D"

tau.multi_herb.forest_pred_long$variable2=ordered(tau.multi_herb.forest_pred_long$variable2,levels=c("Manual","Manual+Herbicide","2,4-D","S&M"))

ggplot(tau.multi_herb.forest_pred_long, aes(x=value, y=variable2, fill = factor(stat(quantile)))) +
  stat_density_ridges(
    geom = "density_ridges_gradient", calc_ecdf = TRUE,
    quantiles = 4, quantile_lines = TRUE
  ) +
  scale_fill_viridis_d(name = "Quartiles")+
  theme_bw(base_size = 16)+labs(x="Wheat yield gain(t/ha) \n over no weeding",y="Weed management options")

ggsave("figures/multi_weed_tau_dist.png", dpi=300,width=5.88,height = 4.16)
```

## Sowing

```{r}
tau.multi_sowing.forest=predict(multi_sowing.forest, target.sample = "all",estimate.variance=TRUE)

tau.multi_sowing.forest=as.data.frame(tau.multi_sowing.forest)


tau.multi_sowing.forest_X=data.frame(LDSestim_sow,tau.multi_sowing.forest)


# Ridges -------------------
tau.multi_sowing.forest_pred=tau.multi_sowing.forest[,1:4]

library(dplyr)
tau.multi_sowing.forest_pred=rename(tau.multi_sowing.forest_pred,"T4_15Dec - T5_16Dec"="predictions.T4_15Dec...T5_16Dec.Y.1")

tau.multi_sowing.forest_pred=rename(tau.multi_sowing.forest_pred,"T3_30Nov-T5_16Dec"="predictions.T3_30Nov...T5_16Dec.Y.1")

tau.multi_sowing.forest_pred=rename(tau.multi_sowing.forest_pred,"T2_20Nov-T5_16Dec"="predictions.T2_20Nov...T5_16Dec.Y.1")

tau.multi_sowing.forest_pred=rename(tau.multi_sowing.forest_pred,"T1_10Nov-T5_16Dec"="predictions.T1_10Nov...T5_16Dec.Y.1")


tau.multi_sowing.forest_pred_long=melt(tau.multi_sowing.forest_pred[,1:4])

levels(tau.multi_sowing.forest_pred_long$variable)[match("T4_15Dec - T5_16Dec",levels(tau.multi_sowing.forest_pred_long$variable))] <- "1-15 Dec" 

levels(tau.multi_sowing.forest_pred_long$variable)[match("T3_30Nov-T5_16Dec",levels(tau.multi_sowing.forest_pred_long$variable))] <- "21-30 Nov"

levels(tau.multi_sowing.forest_pred_long$variable)[match("T2_20Nov-T5_16Dec",levels(tau.multi_sowing.forest_pred_long$variable))] <- "11-20 Nov"

levels(tau.multi_sowing.forest_pred_long$variable)[match("T1_10Nov-T5_16Dec",levels(tau.multi_sowing.forest_pred_long$variable))] <- "1-10 Nov"

library(ggalluvial)
library(ggplot2)
library(ggridges)
library(reshape2)

ggplot(tau.multi_sowing.forest_pred_long, aes(x=value, y=variable, fill = factor(stat(quantile)))) +
  stat_density_ridges(
    geom = "density_ridges_gradient", calc_ecdf = TRUE,
    quantiles = 4, quantile_lines = TRUE
  ) +
  scale_fill_viridis_d(name = "Quartiles")+
  theme_bw(base_size = 16)+labs(x="Wheat yield gain(t/ha) \n over late sowing (after 16 Dec)",y="Sowing date window")

ggsave("figures/multi_sowing_tau_dist.png", dpi=300,width=5.88,height = 4.16)







```

## Irrigation

```{r}
tau.multi_irrig.forest=predict(multi_irrig.forest, target.sample = "all",estimate.variance=TRUE)

tau.multi_irrig.forest=as.data.frame(tau.multi_irrig.forest)


tau.multi_irrig.forest_X=data.frame(LDSestim_irrig,tau.multi_irrig.forest)


# Ridges -------------------
tau.multi_irrig.forest_pred=tau.multi_irrig.forest[,1:3]

library(dplyr)
tau.multi_irrig.forest_pred=rename(tau.multi_irrig.forest_pred,"Two-One"="predictions.Two...One.Y.1")

tau.multi_irrig.forest_pred=rename(tau.multi_irrig.forest_pred,"Three-One"="predictions.Three...One.Y.1")

tau.multi_irrig.forest_pred=rename(tau.multi_irrig.forest_pred,"Four-One"="predictions.Fourplus...One.Y.1")




tau.multi_irrig.forest_pred_long=melt(tau.multi_irrig.forest_pred[,1:3])

ggplot(tau.multi_irrig.forest_pred_long, aes(x=value, y=variable, fill = factor(stat(quantile)))) +
  stat_density_ridges(
    geom = "density_ridges_gradient", calc_ecdf = TRUE,
    quantiles = 4, quantile_lines = TRUE
  ) +
  scale_fill_viridis_d(name = "Quartiles")+
  theme_bw(base_size = 16)+labs(x="Wheat yield gain(t/ha)",y="Irrigation number")

ggsave("figures/multi_irrig_tau_dist.png", dpi=300,width=5.88,height = 4.16)






```

## Varieties

```{r}

tau.multi_variety.forest=predict(multi_variety.forest, target.sample = "all",estimate.variance=TRUE)

tau.multi_variety.forest=as.data.frame(tau.multi_variety.forest)


tau.multi_variety.forest_X=data.frame(LDSestim_variety,tau.multi_variety.forest)


# Ridges -------------------
tau.multi_variety.forest_pred=tau.multi_variety.forest[,1:11]

library(dplyr)
tau.multi_variety.forest_pred=rename(tau.multi_variety.forest_pred,"Local-HD2967"="predictions.Local...HD2967.Y.1")

tau.multi_variety.forest_pred=rename(tau.multi_variety.forest_pred,"PBW343-HD2967"="predictions.PBW343...HD2967.Y.1")

tau.multi_variety.forest_pred=rename(tau.multi_variety.forest_pred,"UP262-HD2967"="predictions.UP262...HD2967.Y.1")

tau.multi_variety.forest_pred=rename(tau.multi_variety.forest_pred,"LOK1-HD2967"="predictions.LOK1...HD2967.Y.1")

tau.multi_variety.forest_pred=rename(tau.multi_variety.forest_pred,"PBW154-HD2967"="predictions.PBW154...HD2967.Y.1")

tau.multi_variety.forest_pred=rename(tau.multi_variety.forest_pred,"Kedar-HD2967"="predictions.Kedar...HD2967.Y.1")

tau.multi_variety.forest_pred=rename(tau.multi_variety.forest_pred,"SUPER303-HD2967"="predictions.SUPER303...HD2967.Y.1")

tau.multi_variety.forest_pred=rename(tau.multi_variety.forest_pred,"PBW502-HD2967"="predictions.PBW502...HD2967.Y.1")

tau.multi_variety.forest_pred=rename(tau.multi_variety.forest_pred,"HD2733-HD2967"="predictions.HD2733...HD2967.Y.1")

tau.multi_variety.forest_pred=rename(tau.multi_variety.forest_pred,"HUW234-HD2967"="predictions.HUW234...HD2967.Y.1")

tau.multi_variety.forest_pred=rename(tau.multi_variety.forest_pred,"RR21-HD2967"="predictions.RR21...HD2967.Y.1")

tau.multi_variety.forest_pred_long=melt(tau.multi_variety.forest_pred[,1:11])

ggplot(tau.multi_variety.forest_pred_long, aes(x=value, y=variable, fill = factor(stat(quantile)))) +
  stat_density_ridges(
    geom = "density_ridges_gradient", calc_ecdf = TRUE,
    quantiles = 4, quantile_lines = TRUE
  ) +
  scale_fill_viridis_d(name = "Quartiles")+
  theme_bw(base_size = 16)+labs(x="Wheat yield gain(t/ha) \n over HD2967",y="Varieties")

ggsave("figures/multi_variety_tau_dist.png", , dpi=300,width=5.88,height = 4.16)


```

# Bivariate Mapping at District Level

### Weed management

```{r}
library(geodata)

India=gadm(country="IND", level=2,path=tempdir())
plot(India)
India_aoi=subset(India,India$NAME_1=="Bihar"|India$NAME_2%in%c("Ballia","Chandauli","Deoria","Ghazipur","Kushinagar","Maharajganj","Mau","Siddharth Nagar","Gorakhpur"))

plot(India_aoi)

plot(India_aoi, add=TRUE)

library(sf)
India_aoi_sf=st_as_sf(India_aoi)

library(fastDummies)

tau.multi_herb.forest_X=fastDummies::dummy_cols(tau.multi_herb.forest_X, select_columns=c("Herbicidename_cat"))

library(sp)
tau.multi_herb.forest_X_sp=SpatialPointsDataFrame(cbind(tau.multi_herb.forest_X$O.largestPlotGPS.Longitude,tau.multi_herb.forest_X$O.largestPlotGPS.Latitude),data=tau.multi_herb.forest_X,proj4string=CRS("+proj=longlat +datum=WGS84"))

tau.multi_herb.forest_X_sf=st_as_sf(tau.multi_herb.forest_X_sp)

points_in_district <- st_join(tau.multi_herb.forest_X_sf, India_aoi_sf)

tau.multi_herb.forest_X_sp_aoi <- points_in_district %>% group_by(NAME_2) %>% summarise(Sulfo_share = mean(Herbicidename_cat_SulfosulfuronMetsulfuron),Sulfo_yield_gain=mean(predictions.SulfosulfuronMetsulfuron...No.weeding.Y.1), n=n())

tau.multi_herb.forest_X_sp_aoi  <- st_drop_geometry(tau.multi_herb.forest_X_sp_aoi )

India_aoi_sf_herb <- left_join(India_aoi_sf, tau.multi_herb.forest_X_sp_aoi, by="NAME_2")

India_aoi_sf_herb$Sulfo_adoption_gap=1-India_aoi_sf_herb$Sulfo_share

library(tmap)
tm_shape(India_aoi_sf_herb) +
tm_polygons(col="n", title = "Number of observations")

tm_shape(India_aoi_sf_herb) +
tm_polygons(col="Sulfo_adoption_gap", title = "Sulfosulfuron & Metsulfuron \n adoption gap")

tm_shape(India_aoi_sf_herb) +
   tm_polygons(col="Sulfo_yield_gain", title = "Sulfosulfuron & Metsulfuron \n yield gain (t/ha)")


library(biscale)
library(ggplot2)
data <- bi_class(India_aoi_sf_herb, y = "Sulfo_yield_gain", x = "Sulfo_adoption_gap", style = "quantile", dim = 3)
table(data$bi_class)

labels1 <- biscale::bi_class_breaks(
    data,
    y = Sulfo_yield_gain,
    x = Sulfo_adoption_gap,
    style = "quantile",
    dim = 3, dig_lab = 0, split = FALSE
)
labels1

previous_theme <- theme_set(theme_bw())

# create map
map <- ggplot() +
    geom_sf(data = data, mapping = aes(fill = bi_class), color = NA, size = 0.1, show.legend = FALSE) +
    bi_scale_fill(pal = "GrPink", dim = 3) +
    labs(title = "S&M herbicide")
bi_theme()
map

legend <- bi_legend(
    pal = "GrPink",
    breaks = labels1,
    ylab = "Higher yield gain",
    xlab = "Higher adopt gap",
    size = 8
)
legend
# combine map with legend
library(cowplot)
finalPlot <- ggdraw() +
    draw_plot(map, 0, 0, 1, 1) +
    draw_plot(legend, 0.6, 0.6, 0.45, 0.45)

finalPlot

ggsave("figures/Weeding_bivariate_map.png", dpi=300,width = 4.12, height = 3.16)

```

### Sowing

```{r}

library(fastDummies)

tau.multi_sowing.forest_X=fastDummies::dummy_cols(tau.multi_sowing.forest_X, select_columns=c("Sowing_Date_Schedule"))

library(sp)
tau.multi_sowing.forest_X_sp=SpatialPointsDataFrame(cbind(tau.multi_sowing.forest_X$O.largestPlotGPS.Longitude,tau.multi_sowing.forest_X$O.largestPlotGPS.Latitude),data=tau.multi_sowing.forest_X,proj4string=CRS("+proj=longlat +datum=WGS84"))

tau.multi_sowing.forest_X_sf=st_as_sf(tau.multi_sowing.forest_X_sp)

points_in_district_sowing <- st_join(tau.multi_sowing.forest_X_sf, India_aoi_sf)

tau.multi_sowing.forest_X_sp_aoi <- points_in_district_sowing %>% group_by(NAME_2) %>% summarise(T1_10Nov_share = mean(Sowing_Date_Schedule_T1_10Nov),T1_10Nov_yield_gain=mean(predictions.T1_10Nov...T5_16Dec.Y.1), n=n())

tau.multi_sowing.forest_X_sp_aoi  <- st_drop_geometry(tau.multi_sowing.forest_X_sp_aoi )

India_aoi_sf_sowing <- left_join(India_aoi_sf, tau.multi_sowing.forest_X_sp_aoi, by="NAME_2")

India_aoi_sf_sowing$T1_10Nov_adoption_gap=1-India_aoi_sf_sowing$T1_10Nov_share

library(tmap)
tm_shape(India_aoi_sf_sowing) +
tm_polygons(col="n", title = "Number of observations")

tm_shape(India_aoi_sf_sowing) +
tm_polygons(col="T1_10Nov_adoption_gap", title = "1-10 Nov early sowing \n adoption gap")

tm_shape(India_aoi_sf_sowing) +
   tm_polygons(col="T1_10Nov_yield_gain", title = "1-10 Nov early sowing \n yield gain (t/ha)")


library(biscale)
library(ggplot2)
data <- bi_class(India_aoi_sf_sowing, y = "T1_10Nov_yield_gain", x = "T1_10Nov_adoption_gap", style = "quantile", dim = 3)
table(data$bi_class)

labels1 <- biscale::bi_class_breaks(
    data,
    y = T1_10Nov_yield_gain,
    x = T1_10Nov_adoption_gap,
    style = "quantile",
    dim = 3, dig_lab = 0, split = FALSE
)
labels1

previous_theme <- theme_set(theme_bw())

# create map
map <- ggplot() +
    geom_sf(data = data, mapping = aes(fill = bi_class), color = NA, size = 0.1, show.legend = FALSE) +
    bi_scale_fill(pal = "GrPink", dim = 3) +
    labs(title = "Early sowing(1-10 Nov)")
bi_theme()
map

legend <- bi_legend(
    pal = "GrPink",
    breaks = labels1,
    ylab = "Higher yield gain",
    xlab = "Higher adopt gap",
    size = 8
)
legend
# combine map with legend
library(cowplot)
finalPlot <- ggdraw() +
    draw_plot(map, 0, 0, 1, 1) +
    draw_plot(legend, 0.6, 0.6, 0.4, 0.4)

finalPlot

ggsave("figures/sowing_bivariate_map.png", dpi=300,width = 4.88, height = 4.16)

```

### Irrigation

```{r}
library(fastDummies)

tau.multi_irrig.forest_X=fastDummies::dummy_cols(tau.multi_irrig.forest_X, select_columns=c("G.q5305_irrigTimes_cat"))

library(sp)
tau.multi_irrig.forest_X_sp=SpatialPointsDataFrame(cbind(tau.multi_irrig.forest_X$O.largestPlotGPS.Longitude,tau.multi_irrig.forest_X$O.largestPlotGPS.Latitude),data=tau.multi_irrig.forest_X,proj4string=CRS("+proj=longlat +datum=WGS84"))

tau.multi_irrig.forest_X_sf=st_as_sf(tau.multi_irrig.forest_X_sp)

points_in_district_irrig <- st_join(tau.multi_irrig.forest_X_sf, India_aoi_sf)

tau.multi_irrig.forest_X_sp_aoi <- points_in_district_irrig %>% group_by(NAME_2) %>% summarise(Fourplus_share = mean(G.q5305_irrigTimes_cat_Fourplus),Fourplus_yield_gain=mean(predictions.Fourplus...One.Y.1), n=n())

tau.multi_irrig.forest_X_sp_aoi  <- st_drop_geometry(tau.multi_irrig.forest_X_sp_aoi )

India_aoi_sf_irrig <- left_join(India_aoi_sf, tau.multi_irrig.forest_X_sp_aoi, by="NAME_2")

India_aoi_sf_irrig$Fourplus_adoption_gap=1-India_aoi_sf_irrig$Fourplus_share

library(tmap)
tm_shape(India_aoi_sf_irrig) +
tm_polygons(col="n", title = "Number of observations")

tm_shape(India_aoi_sf_irrig) +
tm_polygons(col="Fourplus_adoption_gap", title = "4th irrigation \n adoption gap")

tm_shape(India_aoi_sf_irrig) +
   tm_polygons(col="Fourplus_yield_gain", title = "Four irrigations \n yield gain (t/ha)")


library(biscale)
library(ggplot2)
data <- bi_class(India_aoi_sf_irrig, y = "Fourplus_yield_gain", x = "Fourplus_adoption_gap", style = "quantile", dim = 3)
table(data$bi_class)

labels1 <- biscale::bi_class_breaks(
    data,
    y = Fourplus_yield_gain,
    x = Fourplus_adoption_gap,
    style = "quantile",
    dim = 3, dig_lab = 0, split = FALSE
)
labels1

previous_theme <- theme_set(theme_bw())

# create map
map <- ggplot() +
    geom_sf(data = data, mapping = aes(fill = bi_class), color = NA, size = 0.1, show.legend = FALSE) +
    bi_scale_fill(pal = "GrPink", dim = 3) +
    labs(title = "Four irrigations")
bi_theme()
map

legend <- bi_legend(
    pal = "GrPink",
    breaks = labels1,
    ylab = "Higher yield gain",
    xlab = "Higher adopt gap",
    size = 8
)
legend
# combine map with legend
library(cowplot)
finalPlot <- ggdraw() +
    draw_plot(map, 0, 0, 1, 1) +
    draw_plot(legend, 0.6, 0.6, 0.45, 0.45)

finalPlot

ggsave("figures/Irrigation_bivariate_map.png", dpi=300,width = 4.88, height = 4.16)



```

### Variety

HD2967 is the dominant variety. For newer varieties like SUPER 303, where would they have higher yield gains than the status quo high yielding variety?

```{r}
library(fastDummies)

tau.multi_variety.forest_X=fastDummies::dummy_cols(tau.multi_variety.forest_X, select_columns=c("D.q410_varName"))

library(sp)
tau.multi_variety.forest_X_sp=SpatialPointsDataFrame(cbind(tau.multi_variety.forest_X$O.largestPlotGPS.Longitude,tau.multi_variety.forest_X$O.largestPlotGPS.Latitude),data=tau.multi_variety.forest_X,proj4string=CRS("+proj=longlat +datum=WGS84"))

tau.multi_variety.forest_X_sf=st_as_sf(tau.multi_variety.forest_X_sp)

points_in_district_variety <- st_join(tau.multi_variety.forest_X_sf, India_aoi_sf)

tau.multi_variety.forest_X_sp_aoi <- points_in_district_variety %>% group_by(NAME_2) %>% summarise(Super303_share = mean(D.q410_varName_SUPER303),Super303_yield_gain=mean(predictions.SUPER303...HD2967.Y.1), n=n())

tau.multi_variety.forest_X_sp_aoi  <- st_drop_geometry(tau.multi_variety.forest_X_sp_aoi )

India_aoi_sf_variety <- left_join(India_aoi_sf, tau.multi_variety.forest_X_sp_aoi, by="NAME_2")

India_aoi_sf_variety$Super303_adoption_gap=1-India_aoi_sf_variety$Super303_share

library(tmap)
tm_shape(India_aoi_sf_variety) +
tm_polygons(col="n", title = "Number of observations")

tm_shape(India_aoi_sf_variety) +
tm_polygons(col="Super303_adoption_gap", title = "Super 303 \n adoption gap")

tm_shape(India_aoi_sf_variety) +
   tm_polygons(col="Super303_yield_gain", title = "Super 303 variety \n yield gain (t/ha)")


library(biscale)
library(ggplot2)
data <- bi_class(India_aoi_sf_variety, y = "Super303_yield_gain", x = "Super303_adoption_gap", style = "quantile", dim = 3)
table(data$bi_class)

labels1 <- biscale::bi_class_breaks(
    data,
    y = Super303_yield_gain,
    x = Super303_adoption_gap,
    style = "quantile",
    dim = 3, dig_lab = 0, split = FALSE
)
labels1

previous_theme <- theme_set(theme_bw())

# create map
map <- ggplot() +
    geom_sf(data = data, mapping = aes(fill = bi_class), color = NA, size = 0.1, show.legend = FALSE) +
    bi_scale_fill(pal = "GrPink", dim = 3) +
    labs(title = "Super 303 vs HD2967 variety")
bi_theme()
map

legend <- bi_legend(
    pal = "GrPink",
    breaks = labels1,
    ylab = "Higher yield gain",
    xlab = "Higher adopt gap",
    size = 8
)
legend
# combine map with legend
library(cowplot)
finalPlot <- ggdraw() +
    draw_plot(map, 0, 0, 1, 1) +
    draw_plot(legend, 0.6, 0.6, 0.45, 0.45)

finalPlot

ggsave("figures/Variety_bivariate_map.png", dpi=300,width = 4.88, height = 4.16)




```

# Kriging yield gains and adoption rates

# Simple maximum yield treatment assignment

Given the individual farm level yield gains to each of the sowing date categories, we can simply determine which of these gives the highest predicted yield gains for each farmer. To get these, we simply index the maximum sowing date. We then map this across space.

## Weed management

### Choose maximum yield

```{r}
tau.multi_herb.forest_pred$max_yield_gain_name=colnames(tau.multi_herb.forest_pred)[max.col(tau.multi_herb.forest_pred)]

tau.multi_herb.forest_pred$max_yield_gain_name[tau.multi_herb.forest_pred$max_yield_gain<0]="No weeding"

table(tau.multi_herb.forest_pred$max_yield_gain_name)

tau.multi_herb.forest_pred$max_yield_gain<- pmax(tau.multi_herb.forest_pred$`Manual-No weeding`,tau.multi_herb.forest_pred$`Manual_herb-No weeding`,tau.multi_herb.forest_pred$`2,4-D -No weeding`,tau.multi_herb.forest_pred$`SulfosulfuronMetsulfuron-No weeding`)

simple_tr_assignment_herb=cbind(LDSestim_herb,tau.multi_herb.forest_pred)

simple_tr_assignment_herbsp= SpatialPointsDataFrame(cbind(simple_tr_assignment_herb$O.largestPlotGPS.Longitude,simple_tr_assignment_herb$O.largestPlotGPS.Latitude),data=simple_tr_assignment_herb,proj4string=CRS("+proj=longlat +datum=WGS84"))

library(mapview)
mapviewOptions(fgb = FALSE)
simple_tr_assignment_herbspmapview=mapview(simple_tr_assignment_herbsp,zcol="max_yield_gain_name",layer.name="Highest yield \n weed management option")
simple_tr_assignment_herbspmapview

library(tmap)

simple_tr_assignment_herb_tmap=tm_shape(India_aoi_sf) + 
  tm_borders(alpha=.4) + 
  tm_shape(simple_tr_assignment_herbsp)+
  tm_dots(col = "max_yield_gain_name",scale = 2.5,palette = "Dark2", title="Highest yield gain \n weed management contrast") 
simple_tr_assignment_herb_tmap

tmap_save(simple_tr_assignment_herb_tmap,"figures/simple_tr_assignment_herb_tmap.png", dpi=300,width=4.88,height = 4.16)


# Using statistical significance to delineate areas
# Manual vs No-weeding 
# tau.multi_herb.forest$Manual_Noweeding_LCI=tau.multi_herb.forest$predictions.Manual...No.weeding.Y.1-1.96*tau.multi_herb.forest$variance.estimates.1
# tau.multi_herb.forest$Manual_Noweeding_UCI=tau.multi_herb.forest$predictions.Manual...No.weeding.Y.1+1.96*tau.multi_herb.forest$variance.estimates.1
# 
# 
# # Manual_herb vs No weeding 
# tau.multi_herb.forest$ManualHerb_Noweeding_LCI=tau.multi_herb.forest$predictions.Manual_herb...No.weeding.Y.1-1.96*tau.multi_herb.forest$variance.estimates.2
# tau.multi_herb.forest$ManualHerb_Noweeding_UCI=tau.multi_herb.forest$predictions.Manual_herb...No.weeding.Y.1+1.96*tau.multi_herb.forest$variance.estimates.2
# 
# # 24D vs No weeding 
# tau.multi_herb.forest$Herb24D_Noweeding_LCI=tau.multi_herb.forest$predictions.2.4.D...No.weeding.Y.1-1.96*tau.multi_herb.forest$variance.estimates.3
# tau.multi_herb.forest$Herb24D_Noweeding_UCI=tau.multi_herb.forest$predictions.2.4.D...No.weeding.Y.1+1.96*tau.multi_herb.forest$variance.estimates.3
# 
# # SulfosulfuronMetsulfuron vs No weeding
# tau.multi_herb.forest$HerbSulfoMetsu_Noweeding_LCI=tau.multi_herb.forest$predictions.SulfosulfuronMetsulfuron...No.weeding.Y.1-1.96*tau.multi_herb.forest$variance.estimates.4
# tau.multi_herb.forest$HerbSulfoMetsu_Noweeding_UCI=tau.multi_herb.forest$predictions.SulfosulfuronMetsulfuron...No.weeding.Y.1+1.96*tau.multi_herb.forest$variance.estimates.4
# 
# # Mapping the statistically significant estimates
# 
# tau.multi_herb.forest_luci=subset(tau.multi_herb.forest, select=c("Manual_Noweeding_LCI","Manual_Noweeding_UCI","ManualHerb_Noweeding_LCI","ManualHerb_Noweeding_UCI","Herb24D_Noweeding_LCI","Herb24D_Noweeding_UCI","HerbSulfoMetsu_Noweeding_LCI","HerbSulfoMetsu_Noweeding_UCI"))
# 
# tau.multi_herb.forest_luci$max_yield_gain_name=colnames(tau.multi_herb.forest_luci)[max.col(tau.multi_herb.forest_luci)]
# 
# tau.multi_herb.forest_luci$max_yield_gain<- pmax(tau.multi_herb.forest_luci$Manual_Noweeding_UCI,tau.multi_herb.forest_luci$ManualHerb_Noweeding_UCI,tau.multi_herb.forest_luci$Herb24D_Noweeding_UCI,tau.multi_herb.forest_luci$HerbSulfoMetsu_Noweeding_UCI)
# 
# table(tau.multi_herb.forest_luci$max_yield_gain_name)
# 
# simple_tr_assignment_herb_luci=cbind(LDSestim_herb,tau.multi_herb.forest_luci)
# 
# simple_tr_assignment_herb_luci_sp= SpatialPointsDataFrame(cbind(simple_tr_assignment_herb_luci$O.largestPlotGPS.Longitude,simple_tr_assignment_herb_luci$O.largestPlotGPS.Latitude),data=simple_tr_assignment_herb,proj4string=CRS("+proj=longlat +datum=WGS84"))
# 

```

## Sowing

```{r}
tau.multi_sowing.forest_pred$max_yield_gain_name=colnames(tau.multi_sowing.forest_pred)[max.col(tau.multi_sowing.forest_pred)]

table(tau.multi_sowing.forest_pred$max_yield_gain_name)

tau.multi_sowing.forest_pred$max_yield_gain<- pmax(tau.multi_sowing.forest_pred$`T1_10Nov-T5_16Dec`,tau.multi_sowing.forest_pred$`T2_20Nov-T5_16Dec`,tau.multi_sowing.forest_pred$`T3_30Nov-T5_16Dec`,tau.multi_sowing.forest_pred$`T4_15Dec - T5_16Dec`)

tau.multi_sowing.forest_pred$max_yield_gain_name[tau.multi_sowing.forest_pred$max_yield_gain<0]="T5"



simple_tr_assignment_sowing=cbind(LDSestim_sow,tau.multi_sowing.forest_pred)

simple_tr_assignment_sowingsp= SpatialPointsDataFrame(cbind(simple_tr_assignment_sowing$O.largestPlotGPS.Longitude,simple_tr_assignment_sowing$O.largestPlotGPS.Latitude),data=simple_tr_assignment_sowing,proj4string=CRS("+proj=longlat +datum=WGS84"))

library(mapview)
mapviewOptions(fgb = FALSE)
simple_tr_assignment_sowingspmapview=mapview(simple_tr_assignment_sowingsp,zcol="max_yield_gain_name",layer.name="Recommended sowing dates")
simple_tr_assignment_sowingspmapview

library(tmap)

simple_tr_assignment_sowing_tmap=tm_shape(India_aoi_sf) + 
  tm_borders(alpha=.4) + 
  tm_shape(simple_tr_assignment_sowingsp)+
  tm_dots(col = "max_yield_gain_name",scale = 2.5,palette = "Dark2", title="Highest yield gain \n sowing window contrast") 
simple_tr_assignment_sowing_tmap

tmap_save(simple_tr_assignment_sowing_tmap,"figures/simple_tr_assignment_sowing_tmap.png", dpi=300,width=4.88,height = 4.16)


```

### Yield gains to simple optimal choice

```{r}

simple_tr_assignment_sowingspmapview_yield=mapview(simple_tr_assignment_sowingsp,zcol="T1_10Nov-T5_16Dec",layer.name="Recommended sowing dates")
simple_tr_assignment_sowingspmapview_yield


library(tmap)
# tmap_mode("view")
# rice_wheat_yield_rho_dist_sf_sp_map <- tm_shape(rice_wheat_yield_rho_dist_sf_sp) +
#     tm_polygons(col = "Mean_Rice_Wheat_Rho", title = "Rice wheat equation correlation", style = "quantile") +
#     tm_layout(legend.outside = TRUE)
```

## Irrigation

```{r}
#library(rgdal)
tau.multi_irrig.forest_pred$max_yield_gain_name=colnames(tau.multi_irrig.forest_pred)[max.col(tau.multi_irrig.forest_pred)]

table(tau.multi_irrig.forest_pred$max_yield_gain_name)

tau.multi_irrig.forest_pred$max_yield_gain<- pmax(tau.multi_irrig.forest_pred$`Two-One`,tau.multi_irrig.forest_pred$`Three-One`,tau.multi_irrig.forest_pred$`Four-One`)

tau.multi_irrig.forest_pred$max_yield_gain_name[tau.multi_irrig.forest_pred$max_yield_gain<0]="Three"

tau.multi_irrig.forest_pred$max_yield_gain_name[tau.multi_irrig.forest_pred$max_yield_gain_name=="Four-One"]="Four"

simple_tr_assignment_irrig=cbind(LDSestim_irrig,tau.multi_irrig.forest_pred)

simple_tr_assignment_irrigsp= SpatialPointsDataFrame(cbind(simple_tr_assignment_irrig$O.largestPlotGPS.Longitude,simple_tr_assignment_irrig$O.largestPlotGPS.Latitude),data=simple_tr_assignment_irrig,proj4string=CRS("+proj=longlat +datum=WGS84"))

library(mapview)
mapviewOptions(fgb = FALSE)
simple_tr_assignment_irrigspmapview=mapview(simple_tr_assignment_irrigsp,zcol="max_yield_gain_name",layer.name="Recommended irrigation amounts")
simple_tr_assignment_irrigspmapview

library(tmap)

simple_tr_assignment_irrig_tmap=tm_shape(India_aoi_sf) + 
  tm_borders(alpha=.4) + 
  tm_shape(simple_tr_assignment_irrigsp)+
  tm_dots(col = "max_yield_gain_name",scale = 2.5,palette = "Dark2", title="Highest yield gain \n irrigation contrast") 
simple_tr_assignment_sowing_tmap

tmap_save(simple_tr_assignment_irrig_tmap,"figures/simple_tr_assignment_irrig_tmap.png", dpi=300,width=4.88,height = 4.16)

```

### Yield gains to simple optimal choice

```{r}

simple_tr_assignment_irrigspmapview_yield=mapview(simple_tr_assignment_irrigsp,zcol="max_yield_gain",layer.name="Recommended irrig dates")
simple_tr_assignment_irrigspmapview_yield
```

## Varieties

```{r}
#library(rgdal)
tau.multi_variety.forest_pred$max_yield_gain_name=colnames(tau.multi_variety.forest_pred)[max.col(tau.multi_variety.forest_pred)]

tau.multi_variety.forest_pred$max_yield_gain<- pmax(tau.multi_variety.forest_pred$`Local-HD2967`,tau.multi_variety.forest_pred$`PBW343-HD2967`,tau.multi_variety.forest_pred$`UP262-HD2967`,tau.multi_variety.forest_pred$`LOK1-HD2967`,tau.multi_variety.forest_pred$`PBW154-HD2967`,tau.multi_variety.forest_pred$`Kedar-HD2967`,tau.multi_variety.forest_pred$`SUPER303-HD2967`,tau.multi_variety.forest_pred$`PBW502-HD2967`,tau.multi_variety.forest_pred$`HD2733-HD2967`,tau.multi_variety.forest_pred$`HUW234-HD2967`)


tau.multi_variety.forest_pred$max_yield_gain_name[tau.multi_variety.forest_pred$max_yield_gain<0]="HD-2967"

tau.multi_variety.forest_pred$max_yield_gain_name[tau.multi_variety.forest_pred$max_yield_gain_name=="SUPER303-HD2967"]="SUPER303"
table(tau.multi_variety.forest_pred$max_yield_gain_name)


simple_tr_assignment_variety=cbind(LDSestim_variety,tau.multi_variety.forest_pred)

simple_tr_assignment_varietysp= SpatialPointsDataFrame(cbind(simple_tr_assignment_variety$O.largestPlotGPS.Longitude,simple_tr_assignment_variety$O.largestPlotGPS.Latitude),data=simple_tr_assignment_variety,proj4string=CRS("+proj=longlat +datum=WGS84"))

library(mapview)
mapviewOptions(fgb = FALSE)
simple_tr_assignment_varietyspmapview=mapview(simple_tr_assignment_varietysp,zcol="max_yield_gain_name",layer.name="Recommended variety")
simple_tr_assignment_varietyspmapview

library(tmap)

simple_tr_assignment_variety_tmap=tm_shape(India_aoi_sf) + 
  tm_borders(alpha=.4) + 
  tm_shape(simple_tr_assignment_varietysp)+
  tm_dots(col = "max_yield_gain_name",scale = 2.5,palette = "Dark2", title="Highest yield gain \n variety contrast") 
simple_tr_assignment_variety_tmap

tmap_save(simple_tr_assignment_variety_tmap,"figures/simple_tr_assignment_variety_tmap.png", dpi=300,width=4.88,height = 4.16)


```

### Yield gains to simple optimal choice

```{r}

simple_tr_assignment_varietyspmapview_yield=mapview(simple_tr_assignment_varietysp,zcol="max_yield_gain",layer.name="Yield gain:SUPER 303-HD 2967")
simple_tr_assignment_varietyspmapview_yield
```

```{r}
library(sf)
tr_assignment_varietysp_sf=st_as_sf(tr_assignment_varietysp)





```

# Status quo to optimal shares: Transitions

```{r}
library(rio)


# tr_assignment_herb=import("D:/OneDrive/CIMMYT/Papers/IO5.3.1.CropResponseModels/WheatResponse/Policytree_Models/tables/tr_assignment_herb.csv")

tr_assignment_herb$depth2_cat[tr_assignment_herb$depth2 == 1] <- "No weeding"
tr_assignment_herb$depth2_cat[tr_assignment_herb$depth2 == 2] <- "Manual"
tr_assignment_herb$depth2_cat[tr_assignment_herb$depth2 == 3] <- "Manual+Herbicide"
tr_assignment_herb$depth2_cat[tr_assignment_herb$depth2 == 4] <- "2,4-D"
tr_assignment_herb$depth2_cat[tr_assignment_herb$depth2 == 5] <- "S&M"

library(ggalluvial)
library(data.table)
tr_assignment_herbDT = data.table(tr_assignment_herb)
TransitionMatrix_herb = tr_assignment_herbDT[, (sum = .N), by = c("Herbicidename_cat", "depth2_cat")]
library(dplyr)

TransitionMatrix_herb=rename(TransitionMatrix_herb,Freq=V1)


levels(TransitionMatrix_herb$Herbicidename_cat)[match("SulfosulfuronMetsulfuron",levels(TransitionMatrix_herb$Herbicidename_cat))] <- "S&M" 

levels(TransitionMatrix_herb$Herbicidename_cat)[match("Manual_herb",levels(TransitionMatrix_herb$Herbicidename_cat))] <- "Manual+Herbicide" 

library(scales)
transitionmatrixplot_herb=ggplot(data=TransitionMatrix_herb,
       aes(axis1=Herbicidename_cat,axis2=depth2_cat, y=Freq))+
       geom_alluvium(aes(fill=depth2_cat))+
       geom_stratum()+
      # geom_text(stat="stratum", aes(label=after_stat(stratum),nudge_y =5))+
       geom_text(stat="stratum", aes(label=paste(after_stat(stratum),":", percent(after_stat(prop)))))+
       scale_x_discrete(limits=c("Herbicidename_cat","depth2_cat"),
                        expand=c(0.15,0.05))+
       scale_fill_viridis_d()+
       theme_void(base_size =20)+
       theme(legend.position = "none")
       
transitionmatrixplot_herb

ggsave("figures/transitionmatrixplot_herb.png",dpi=300,width=5.88,height = 4.16)  

# Sowing 

#library(rio)
#setwd("D:/OneDrive/CIMMYT/Papers/IO5.3.1.CropResponseModels/WheatResponse/Policytree_Models")
# 
# tr_assignment_sowing <- import("D:/OneDrive/CIMMYT/Papers/IO5.3.1.CropResponseModels/WheatResponse/Policytree_Models/tables/tr_assignment_sowing.csv")

tr_assignment_sowing$depth2_cat[tr_assignment_sowing$depth2 == 1] <- "> 16 Dec"
tr_assignment_sowing$depth2_cat[tr_assignment_sowing$depth2 == 2] <- "1-15 Dec"
tr_assignment_sowing$depth2_cat[tr_assignment_sowing$depth2 == 3] <- "21-30 Nov"
tr_assignment_sowing$depth2_cat[tr_assignment_sowing$depth2 == 4] <- "11-20 Nov"
tr_assignment_sowing$depth2_cat[tr_assignment_sowing$depth2 == 5] <- "1-10 Nov"


library(ggalluvial)
library(data.table)
tr_assignment_sowingDT = data.table(tr_assignment_sowing)
TransitionMatrix_sowing <- tr_assignment_sowingDT[, (sum <- .N), by = c("Sowing_Date_Schedule", "depth2_cat")]
library(dplyr)
TransitionMatrix_sowing <- rename(TransitionMatrix_sowing, Freq = V1)

levels(TransitionMatrix_sowing$Sowing_Date_Schedule)[match("T5_16Dec",levels(TransitionMatrix_sowing$Sowing_Date_Schedule))] <- "> 16 Dec" 

levels(TransitionMatrix_sowing$Sowing_Date_Schedule)[match("T4_15Dec",levels(TransitionMatrix_sowing$Sowing_Date_Schedule))] <- "1-15 Dec" 

levels(TransitionMatrix_sowing$Sowing_Date_Schedule)[match("T3_30Nov",levels(TransitionMatrix_sowing$Sowing_Date_Schedule))] <- "21-30 Nov"

levels(TransitionMatrix_sowing$Sowing_Date_Schedule)[match("T2_20Nov",levels(TransitionMatrix_sowing$Sowing_Date_Schedule))] <- "11-20 Nov"

levels(TransitionMatrix_sowing$Sowing_Date_Schedule)[match("T1_10Nov",levels(TransitionMatrix_sowing$Sowing_Date_Schedule))] <- "1-10 Nov"

library(scales)
transitionmatrixplot_sowing <- ggplot(
    data = TransitionMatrix_sowing,
    aes(axis1 = Sowing_Date_Schedule, axis2 = depth2_cat, y = Freq)
) +
    geom_alluvium(aes(fill = depth2_cat)) +
    geom_stratum() +
    # geom_text(stat="stratum", aes(label=after_stat(stratum),nudge_y =5))+
    geom_text(stat = "stratum", aes(label = paste(after_stat(stratum),":", percent(after_stat(prop))))) +
    scale_x_discrete(
        limits = c("Sowing_Date_Schedule", "depth2_cat"),
        expand = c(0.15, 0.05)
    ) +
    scale_fill_viridis_d() +
    theme_void(base_size = 20) +
    theme(legend.position = "none")

transitionmatrixplot_sowing

ggsave("figures/transitionmatrixplot_sowing.png", dpi = 300,width=5.88,height = 4.16)

# Irrigation 
#library(rio)
#setwd("D:/OneDrive/CIMMYT/Papers/IO5.3.1.CropResponseModels/WheatResponse/Policytree_Models")

# tr_assignment_irrig <- import("D:/OneDrive/CIMMYT/Papers/IO5.3.1.CropResponseModels/WheatResponse/Policytree_Models/tables/tr_assignment_irrig.csv")

tr_assignment_irrig$depth2_cat[tr_assignment_irrig$depth2 == 1] <- "One"
tr_assignment_irrig$depth2_cat[tr_assignment_irrig$depth2 == 2] <- "Two"
tr_assignment_irrig$depth2_cat[tr_assignment_irrig$depth2 == 3] <- "Three"
tr_assignment_irrig$depth2_cat[tr_assignment_irrig$depth2 == 4] <- "Fourplus"


library(ggalluvial)
library(data.table)
tr_assignment_irrigDT <- data.table(tr_assignment_irrig)
TransitionMatrix_irrig <- tr_assignment_irrigDT[, (sum <- .N), by = c("G.q5305_irrigTimes_cat", "depth2_cat")]
library(dplyr)
TransitionMatrix_irrig <- rename(TransitionMatrix_irrig, Freq = V1)

library(scales)
transitionmatrixplot_irrig <- ggplot(
    data = TransitionMatrix_irrig,
    aes(axis1 = G.q5305_irrigTimes_cat, axis2 = depth2_cat, y = Freq)
) +
    geom_alluvium(aes(fill = depth2_cat)) +
    geom_stratum() +
    # geom_text(stat="stratum", aes(label=after_stat(stratum),nudge_y =5))+
    geom_text(stat = "stratum", aes(label = paste(after_stat(stratum),":", percent(after_stat(prop))))) +
    scale_x_discrete(
        limits = c("G.q5305_irrigTimes_cat", "depth2_cat"),
        expand = c(0.15, 0.05)
    ) +
    scale_fill_viridis_d() +
    theme_void(base_size = 20) +
    theme(legend.position = "none")

transitionmatrixplot_irrig

ggsave("figures/transitionmatrixplot_irrig.png",  dpi = 300,width=5.88,height = 4.16)

# Varieties

#library(rio)
#setwd("D:/OneDrive/CIMMYT/Papers/IO5.3.1.CropResponseModels/WheatResponse/Policytree_Models")

# tr_assignment_variety <- import("D:/OneDrive/CIMMYT/Papers/IO5.3.1.CropResponseModels/WheatResponse/Policytree_Models/tables/tr_assignment_variety.csv")

tr_assignment_variety$depth2_cat[tr_assignment_variety$depth2==1]="HD2967"
tr_assignment_variety$depth2_cat[tr_assignment_variety$depth2==2]="Local"
tr_assignment_variety$depth2_cat[tr_assignment_variety$depth2==3]="PBW343"
tr_assignment_variety$depth2_cat[tr_assignment_variety$depth2==4]="UP262"
tr_assignment_variety$depth2_cat[tr_assignment_variety$depth2==5]="LOK1"
tr_assignment_variety$depth2_cat[tr_assignment_variety$depth2==6]="PBW154"
tr_assignment_variety$depth2_cat[tr_assignment_variety$depth2==7]="Kedar"
tr_assignment_variety$depth2_cat[tr_assignment_variety$depth2==8]="SUPER303"
tr_assignment_variety$depth2_cat[tr_assignment_variety$depth2==9]="PBW502"
tr_assignment_variety$depth2_cat[tr_assignment_variety$depth2==10]="HD2733"
tr_assignment_variety$depth2_cat[tr_assignment_variety$depth2==11]="HUW234"
tr_assignment_variety$depth2_cat[tr_assignment_variety$depth2==12]="RR21"

library(ggalluvial)
library(data.table)
tr_assignment_varietyDT <- data.table(tr_assignment_variety)
TransitionMatrix_variety <- tr_assignment_varietyDT[, (sum <- .N), by = c("D.q410_varName", "depth2_cat")]
library(dplyr)
TransitionMatrix_variety <- rename(TransitionMatrix_variety, Freq = V1)

library(scales)
transitionmatrixplot_variety <- ggplot(
    data = TransitionMatrix_variety,
    aes(axis1 = D.q410_varName, axis2 = depth2_cat, y = Freq)
) +
    geom_alluvium(aes(fill = depth2_cat)) +
    geom_stratum() +
    # geom_text(stat="stratum", aes(label=after_stat(stratum),nudge_y =5))+
    geom_text(stat = "stratum", aes(label = paste(after_stat(stratum),":", percent(after_stat(prop))))) +
    scale_x_discrete(
        limits = c("D.q410_varName", "depth2_cat"),
        expand = c(0.15, 0.05)
    ) +
    scale_fill_viridis_d() +
    theme_void(base_size = 20) +
    theme(legend.position = "none")

transitionmatrixplot_variety

ggsave("figures/transitionmatrixplot_variety.png",dpi = 300,width=5.88,height = 6.16)


```

# Targeting with cost

## Weed management

```{r}

library(policytree)

DR.scores_herb_cost <- double_robust_scores(multi_herb.forest)

DR.scores_herb_cost[, "No weeding"] <- DR.scores_herb_cost[, "No weeding"] - 0
DR.scores_herb_cost[, "Manual"] <- DR.scores_herb_cost[, "Manual"] - 0.160
DR.scores_herb_cost[, "Manual_herb"] <- DR.scores_herb_cost[, "Manual_herb"] - 0.183
DR.scores_herb_cost[, "2,4-D"] <- DR.scores_herb_cost[, "2,4-D"] - 0.023
DR.scores_herb_cost[, "SulfosulfuronMetsulfuron"] <- DR.scores_herb_cost[, "SulfosulfuronMetsulfuron"] - 0.035

 tr_herb_cost <- policy_tree(X_cf_herb, DR.scores_herb, depth = 2)
plot(tr_herb_cost)

tr_assignment_herb_cost <- LDSestim_herb

tr_assignment_herb_cost$depth2 <- predict(tr_herb_cost, X_cf_herb)
table(tr_assignment_herb_cost$depth2)

tr_assignment_herb_cost$depth2_cat[tr_assignment_herb_cost$depth2 == 1] <- "No weeding"
tr_assignment_herb_cost$depth2_cat[tr_assignment_herb_cost$depth2 == 2] <- "Manual"
tr_assignment_herb_cost$depth2_cat[tr_assignment_herb_cost$depth2 == 3] <- "Manual+Herbicide"
tr_assignment_herb_cost$depth2_cat[tr_assignment_herb_cost$depth2 == 4] <- "2,4-D"
tr_assignment_herb_cost$depth2_cat[tr_assignment_herb_cost$depth2 == 5] <- "SulfosulfuronMetsulfuron"

library(ggalluvial)
library(data.table)
tr_assignment_herb_costDT = data.table(tr_assignment_herb_cost)
TransitionMatrix_herb_cost <- tr_assignment_herb_costDT[, (sum <- .N), by = c("Herbicidename_cat", "depth2_cat")]
library(dplyr)
TransitionMatrix_herb_cost <- rename(TransitionMatrix_herb_cost, Freq = V1)

library(scales)
transitionmatrixplot_herb_cost <- ggplot(
    data = TransitionMatrix_herb_cost,
    aes(axis1 = Herbicidename_cat, axis2 = depth2_cat, y = Freq)
) +
    geom_alluvium(aes(fill = depth2_cat)) +
    geom_stratum() +
    # geom_text(stat="stratum", aes(label=after_stat(stratum),nudge_y =5))+
   geom_text(stat = "stratum", aes(label = paste(after_stat(stratum), percent(after_stat(prop))))) +
    scale_x_discrete(
        limits = c("Herbicidename_cat", "depth2_cat"),
        expand = c(0.15, 0.05)
    ) +
    scale_fill_viridis_d() +
    theme_void(base_size = 20) +
    theme(legend.position = "none")

transitionmatrixplot_herb_cost

ggsave("figures/transitionmatrixplot_herb_cost.png", dpi = 300)
```

## Irrigation

```{r}
library(policytree)

DR.scores_irrig_cost <- double_robust_scores(multi_irrig.forest)

DR.scores_irrig_cost[, "One"] <- DR.scores_irrig_cost[, "One"] - 0.08
DR.scores_irrig_cost[, "Two"] <- DR.scores_irrig_cost[, "Two"] - 0.160
DR.scores_irrig_cost[, "Three"] <- DR.scores_irrig_cost[, "Three"] - 0.240
DR.scores_irrig_cost[, "Fourplus"] <- DR.scores_irrig_cost[, "Fourplus"] - 0.32


tr_irrig_cost <- policy_tree(X_cf_irrig, DR.scores_irrig_cost, depth = 2)
plot(tr_irrig_cost)

tr_assignment_irrig_cost <- LDSestim_irrig

tr_assignment_irrig_cost$depth2 <- predict(tr_irrig_cost, X_cf_irrig)
table(tr_assignment_irrig_cost$depth2)

tr_assignment_irrig_cost$depth2_cat[tr_assignment_irrig_cost$depth2 == 1] <- "One"
tr_assignment_irrig_cost$depth2_cat[tr_assignment_irrig_cost$depth2 == 2] <- "Two"
tr_assignment_irrig_cost$depth2_cat[tr_assignment_irrig_cost$depth2 == 3] <- "Three"
tr_assignment_irrig_cost$depth2_cat[tr_assignment_irrig_cost$depth2 == 4] <- "Fourplus"

library(ggalluvial)
library(data.table)
tr_assignment_irrig_costDT <- data.table(tr_assignment_irrig_cost)
TransitionMatrix_irrig_cost <- tr_assignment_irrig_costDT[, (sum <- .N), by = c("G.q5305_irrigTimes_cat", "depth2_cat")]

library(dplyr)
TransitionMatrix_irrig_cost <- rename(TransitionMatrix_irrig_cost, Freq = V1)

library(scales)
transitionmatrixplot_irrig_cost <- ggplot(
    data = TransitionMatrix_irrig_cost,
    aes(axis1 = G.q5305_irrigTimes_cat, axis2 = depth2_cat, y = Freq)
) +
    geom_alluvium(aes(fill = depth2_cat)) +
    geom_stratum() +
    # geom_text(stat="stratum", aes(label=after_stat(stratum),nudge_y =5))+
    geom_text(stat = "stratum", aes(label = paste(after_stat(stratum), percent(after_stat(prop))))) +
    scale_x_discrete(
        limits = c("G.q5305_irrigTimes_cat", "depth2_cat"),
        expand = c(0.15, 0.05)
    ) +
    scale_fill_viridis_d() +
    theme_void(base_size = 20) +
    theme(legend.position = "none")

transitionmatrixplot_irrig_cost

ggsave("figures/transitionmatrixplot_irrig_cost.png", dpi = 300, dpi=300,width=5.88,height = 4.16)



```

## Sowing

```{r}




```

## Varieties

For varieties, there are small differences in prices to warrant cost estimation
